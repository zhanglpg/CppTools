// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sms-SPaT.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace common_sensors {

namespace {

const ::google::protobuf::Descriptor* SMSPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMSPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SMSPackage_SensorStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMSPackage_SensorStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SMSPackage_SensorStatus_EthernetStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SMSPackage_ObjData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMSPackage_ObjData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SMSPackage_SimuMode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SMSStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMSStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalPhase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalPhase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalPhase_PhaseStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalPhase_PhaseStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalPhase_InterStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SignalPhase_PhaseColor_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ECLCommStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ECLCommStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECLCommStatus_CommStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SMSSPaT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SMSSPaT_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sms_2dSPaT_2eproto() {
  protobuf_AddDesc_sms_2dSPaT_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sms-SPaT.proto");
  GOOGLE_CHECK(file != NULL);
  SMSPackage_descriptor_ = file->message_type(0);
  static const int SMSPackage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, t_ms_rcv_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, nobjs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, ncyclecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, ntscanms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, sensor_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, obj_data_),
  };
  SMSPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMSPackage_descriptor_,
      SMSPackage::default_instance_,
      SMSPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMSPackage));
  SMSPackage_SensorStatus_descriptor_ = SMSPackage_descriptor_->nested_type(0);
  static const int SMSPackage_SensorStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, source_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, can_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, sensorpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, ethernet_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, sensor_timestamp_),
  };
  SMSPackage_SensorStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMSPackage_SensorStatus_descriptor_,
      SMSPackage_SensorStatus::default_instance_,
      SMSPackage_SensorStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_SensorStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMSPackage_SensorStatus));
  SMSPackage_SensorStatus_EthernetStatus_descriptor_ = SMSPackage_SensorStatus_descriptor_->enum_type(0);
  SMSPackage_ObjData_descriptor_ = SMSPackage_descriptor_->nested_type(1);
  static const int SMSPackage_ObjData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, length_obj_),
  };
  SMSPackage_ObjData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMSPackage_ObjData_descriptor_,
      SMSPackage_ObjData::default_instance_,
      SMSPackage_ObjData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSPackage_ObjData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMSPackage_ObjData));
  SMSPackage_SimuMode_descriptor_ = SMSPackage_descriptor_->enum_type(0);
  SMSStatus_descriptor_ = file->message_type(1);
  static const int SMSStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, n_total_packets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, n_total_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, n_total_critical_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, last_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, t_ms_last_critical_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, t_ms_last_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, t_ms_last_valid_packet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, t_ms_last_sensor_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, t_ms_last_obj_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, t_ms_last_obj_data_),
  };
  SMSStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMSStatus_descriptor_,
      SMSStatus::default_instance_,
      SMSStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMSStatus));
  SignalPhase_descriptor_ = file->message_type(2);
  static const int SignalPhase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase, t_ms_rcv_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase, phase_status_),
  };
  SignalPhase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalPhase_descriptor_,
      SignalPhase::default_instance_,
      SignalPhase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalPhase));
  SignalPhase_PhaseStatus_descriptor_ = SignalPhase_descriptor_->nested_type(0);
  static const int SignalPhase_PhaseStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase_PhaseStatus, phase_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase_PhaseStatus, color_),
  };
  SignalPhase_PhaseStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalPhase_PhaseStatus_descriptor_,
      SignalPhase_PhaseStatus::default_instance_,
      SignalPhase_PhaseStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase_PhaseStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalPhase_PhaseStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalPhase_PhaseStatus));
  SignalPhase_InterStatus_descriptor_ = SignalPhase_descriptor_->enum_type(0);
  SignalPhase_PhaseColor_descriptor_ = SignalPhase_descriptor_->enum_type(1);
  ECLCommStatus_descriptor_ = file->message_type(3);
  static const int ECLCommStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECLCommStatus, last_error_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECLCommStatus, t_ms_last_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECLCommStatus, t_ms_last_error_),
  };
  ECLCommStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ECLCommStatus_descriptor_,
      ECLCommStatus::default_instance_,
      ECLCommStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECLCommStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECLCommStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ECLCommStatus));
  ECLCommStatus_CommStatus_descriptor_ = ECLCommStatus_descriptor_->enum_type(0);
  SMSSPaT_descriptor_ = file->message_type(4);
  static const int SMSSPaT_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, intersection_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, t_ms_rcv_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, signal_phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, ecl_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, sms_package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, sms_status_),
  };
  SMSSPaT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SMSSPaT_descriptor_,
      SMSSPaT::default_instance_,
      SMSSPaT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SMSSPaT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SMSSPaT));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sms_2dSPaT_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMSPackage_descriptor_, &SMSPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMSPackage_SensorStatus_descriptor_, &SMSPackage_SensorStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMSPackage_ObjData_descriptor_, &SMSPackage_ObjData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMSStatus_descriptor_, &SMSStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalPhase_descriptor_, &SignalPhase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalPhase_PhaseStatus_descriptor_, &SignalPhase_PhaseStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ECLCommStatus_descriptor_, &ECLCommStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SMSSPaT_descriptor_, &SMSSPaT::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sms_2dSPaT_2eproto() {
  delete SMSPackage::default_instance_;
  delete SMSPackage_reflection_;
  delete SMSPackage_SensorStatus::default_instance_;
  delete SMSPackage_SensorStatus_reflection_;
  delete SMSPackage_ObjData::default_instance_;
  delete SMSPackage_ObjData_reflection_;
  delete SMSStatus::default_instance_;
  delete SMSStatus_reflection_;
  delete SignalPhase::default_instance_;
  delete SignalPhase_reflection_;
  delete SignalPhase_PhaseStatus::default_instance_;
  delete SignalPhase_PhaseStatus_reflection_;
  delete ECLCommStatus::default_instance_;
  delete ECLCommStatus_reflection_;
  delete SMSSPaT::default_instance_;
  delete SMSSPaT_reflection_;
}

void protobuf_AddDesc_sms_2dSPaT_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016sms-SPaT.proto\022\016common_sensors\"\363\005\n\nSMS"
    "Package\022\026\n\016t_ms_rcv_epoch\030\001 \002(\003\022\r\n\005nobjs"
    "\030\002 \002(\005\0229\n\004mode\030\003 \002(\0162#.common_sensors.SM"
    "SPackage.SimuMode:\006NORMAL\022\021\n\tncyclecnt\030\004"
    " \002(\005\022\020\n\010ntscanms\030\005 \002(\005\022>\n\rsensor_status\030"
    "\006 \001(\0132\'.common_sensors.SMSPackage.Sensor"
    "Status\0224\n\010obj_data\030\007 \003(\0132\".common_sensor"
    "s.SMSPackage.ObjData\032\337\002\n\014SensorStatus\022\025\n"
    "\rsource_device\030\001 \002(\005\022\025\n\ncan_status\030\002 \002(\005"
    ":\0010\022\025\n\rsensorpresent\030\003 \002(\005\022^\n\017ethernet_s"
    "tatus\030\004 \002(\01626.common_sensors.SMSPackage."
    "SensorStatus.EthernetStatus:\rUNKNOWN_ERR"
    "OR\022\030\n\020sensor_timestamp\030\005 \002(\005\"\217\001\n\016Etherne"
    "tStatus\022\016\n\nNOTCONNECT\020\000\022\016\n\nCONNECTING\020\001\022"
    "\r\n\tISCONNECT\020\002\022\021\n\rRELIEVE_ERROR\020\003\022\017\n\013ERR"
    "OR_STATE\020\004\022\027\n\023WAIT_OF_REPEAT_DATA\020\005\022\021\n\rU"
    "NKNOWN_ERROR\020\006\032d\n\007ObjData\022\016\n\006obj_id\030\001 \002("
    "\005\022\t\n\001x\030\002 \002(\001\022\t\n\001y\030\003 \002(\001\022\r\n\002vx\030\004 \002(\001:\0010\022\r"
    "\n\002vy\030\005 \002(\001:\0010\022\025\n\nlength_obj\030\006 \002(\001:\0010\" \n\010"
    "SimuMode\022\n\n\006NORMAL\020\000\022\010\n\004SIMU\020\004\"\251\002\n\tSMSSt"
    "atus\022\027\n\017n_total_packets\030\001 \002(\003\022\026\n\016n_total"
    "_errors\030\002 \002(\003\022\037\n\027n_total_critical_errors"
    "\030\003 \002(\003\022\022\n\nlast_error\030\004 \002(\005\022 \n\030t_ms_last_"
    "critical_error\030\005 \002(\003\022\027\n\017t_ms_last_error\030"
    "\006 \002(\003\022\036\n\026t_ms_last_valid_packet\030\007 \002(\003\022 \n"
    "\030t_ms_last_sensor_control\030\010 \001(\003\022\035\n\025t_ms_"
    "last_obj_control\030\t \001(\003\022\032\n\022t_ms_last_obj_"
    "data\030\n \001(\003\"\204\003\n\013SignalPhase\022\026\n\016t_ms_rcv_e"
    "poch\030\001 \002(\003\022@\n\006status\030\002 \002(\0162\'.common_sens"
    "ors.SignalPhase.InterStatus:\007UNKNOWN\022=\n\014"
    "phase_status\030\003 \003(\0132\'.common_sensors.Sign"
    "alPhase.PhaseStatus\032e\n\013PhaseStatus\022\020\n\010ph"
    "ase_id\030\001 \002(\005\022D\n\005color\030\002 \002(\0162&.common_sen"
    "sors.SignalPhase.PhaseColor:\rCOLOR_UNKNO"
    "WN\"4\n\013InterStatus\022\013\n\007UNKNOWN\020\000\022\014\n\010FLASHI"
    "NG\020\001\022\n\n\006NORMAL\020\002\"\?\n\nPhaseColor\022\t\n\005GREEN\020"
    "\001\022\n\n\006YELLOW\020\002\022\007\n\003RED\020\003\022\021\n\rCOLOR_UNKNOWN\020"
    "\004\"\212\002\n\rECLCommStatus\022G\n\021last_error_status"
    "\030\001 \001(\0162(.common_sensors.ECLCommStatus.Co"
    "mmStatus:\002OK\022\030\n\020t_ms_last_update\030\002 \001(\003\022\027"
    "\n\017t_ms_last_error\030\003 \001(\003\"}\n\nCommStatus\022\006\n"
    "\002OK\020\000\022\022\n\016UDP_BIND_ERROR\020\001\022\023\n\017UDP_OTHER_E"
    "RROR\020\002\022\022\n\016ERROR_OUTDATED\020\003\022\027\n\023ERROR_PACK"
    "ET_FORMAT\020\004\022\021\n\rUNKNOWN_ERROR\020\005\"\200\002\n\007SMSSP"
    "aT\022\027\n\017intersection_id\030\001 \002(\005\022\026\n\016t_ms_rcv_"
    "epoch\030\002 \002(\003\0221\n\014signal_phase\030\003 \001(\0132\033.comm"
    "on_sensors.SignalPhase\0221\n\necl_status\030\004 \001"
    "(\0132\035.common_sensors.ECLCommStatus\022/\n\013sms"
    "_package\030\005 \001(\0132\032.common_sensors.SMSPacka"
    "ge\022-\n\nsms_status\030\006 \001(\0132\031.common_sensors."
    "SMSStatus", 2009);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sms-SPaT.proto", &protobuf_RegisterTypes);
  SMSPackage::default_instance_ = new SMSPackage();
  SMSPackage_SensorStatus::default_instance_ = new SMSPackage_SensorStatus();
  SMSPackage_ObjData::default_instance_ = new SMSPackage_ObjData();
  SMSStatus::default_instance_ = new SMSStatus();
  SignalPhase::default_instance_ = new SignalPhase();
  SignalPhase_PhaseStatus::default_instance_ = new SignalPhase_PhaseStatus();
  ECLCommStatus::default_instance_ = new ECLCommStatus();
  SMSSPaT::default_instance_ = new SMSSPaT();
  SMSPackage::default_instance_->InitAsDefaultInstance();
  SMSPackage_SensorStatus::default_instance_->InitAsDefaultInstance();
  SMSPackage_ObjData::default_instance_->InitAsDefaultInstance();
  SMSStatus::default_instance_->InitAsDefaultInstance();
  SignalPhase::default_instance_->InitAsDefaultInstance();
  SignalPhase_PhaseStatus::default_instance_->InitAsDefaultInstance();
  ECLCommStatus::default_instance_->InitAsDefaultInstance();
  SMSSPaT::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sms_2dSPaT_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sms_2dSPaT_2eproto {
  StaticDescriptorInitializer_sms_2dSPaT_2eproto() {
    protobuf_AddDesc_sms_2dSPaT_2eproto();
  }
} static_descriptor_initializer_sms_2dSPaT_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* SMSPackage_SimuMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSPackage_SimuMode_descriptor_;
}
bool SMSPackage_SimuMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SMSPackage_SimuMode SMSPackage::NORMAL;
const SMSPackage_SimuMode SMSPackage::SIMU;
const SMSPackage_SimuMode SMSPackage::SimuMode_MIN;
const SMSPackage_SimuMode SMSPackage::SimuMode_MAX;
const int SMSPackage::SimuMode_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SMSPackage_SensorStatus_EthernetStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSPackage_SensorStatus_EthernetStatus_descriptor_;
}
bool SMSPackage_SensorStatus_EthernetStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::NOTCONNECT;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::CONNECTING;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::ISCONNECT;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::RELIEVE_ERROR;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::ERROR_STATE;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::WAIT_OF_REPEAT_DATA;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::UNKNOWN_ERROR;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::EthernetStatus_MIN;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::EthernetStatus_MAX;
const int SMSPackage_SensorStatus::EthernetStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SMSPackage_SensorStatus::kSourceDeviceFieldNumber;
const int SMSPackage_SensorStatus::kCanStatusFieldNumber;
const int SMSPackage_SensorStatus::kSensorpresentFieldNumber;
const int SMSPackage_SensorStatus::kEthernetStatusFieldNumber;
const int SMSPackage_SensorStatus::kSensorTimestampFieldNumber;
#endif  // !_MSC_VER

SMSPackage_SensorStatus::SMSPackage_SensorStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMSPackage_SensorStatus::InitAsDefaultInstance() {
}

SMSPackage_SensorStatus::SMSPackage_SensorStatus(const SMSPackage_SensorStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMSPackage_SensorStatus::SharedCtor() {
  _cached_size_ = 0;
  source_device_ = 0;
  can_status_ = 0;
  sensorpresent_ = 0;
  ethernet_status_ = 6;
  sensor_timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMSPackage_SensorStatus::~SMSPackage_SensorStatus() {
  SharedDtor();
}

void SMSPackage_SensorStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SMSPackage_SensorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMSPackage_SensorStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSPackage_SensorStatus_descriptor_;
}

const SMSPackage_SensorStatus& SMSPackage_SensorStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SMSPackage_SensorStatus* SMSPackage_SensorStatus::default_instance_ = NULL;

SMSPackage_SensorStatus* SMSPackage_SensorStatus::New() const {
  return new SMSPackage_SensorStatus;
}

void SMSPackage_SensorStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    source_device_ = 0;
    can_status_ = 0;
    sensorpresent_ = 0;
    ethernet_status_ = 6;
    sensor_timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMSPackage_SensorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 source_device = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_device_)));
          set_has_source_device();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_status;
        break;
      }
      
      // required int32 can_status = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &can_status_)));
          set_has_can_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sensorpresent;
        break;
      }
      
      // required int32 sensorpresent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensorpresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensorpresent_)));
          set_has_sensorpresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ethernet_status;
        break;
      }
      
      // required .common_sensors.SMSPackage.SensorStatus.EthernetStatus ethernet_status = 4 [default = UNKNOWN_ERROR];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ethernet_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common_sensors::SMSPackage_SensorStatus_EthernetStatus_IsValid(value)) {
            set_ethernet_status(static_cast< ::common_sensors::SMSPackage_SensorStatus_EthernetStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sensor_timestamp;
        break;
      }
      
      // required int32 sensor_timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sensor_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_timestamp_)));
          set_has_sensor_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMSPackage_SensorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 source_device = 1;
  if (has_source_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->source_device(), output);
  }
  
  // required int32 can_status = 2 [default = 0];
  if (has_can_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->can_status(), output);
  }
  
  // required int32 sensorpresent = 3;
  if (has_sensorpresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sensorpresent(), output);
  }
  
  // required .common_sensors.SMSPackage.SensorStatus.EthernetStatus ethernet_status = 4 [default = UNKNOWN_ERROR];
  if (has_ethernet_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ethernet_status(), output);
  }
  
  // required int32 sensor_timestamp = 5;
  if (has_sensor_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sensor_timestamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMSPackage_SensorStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 source_device = 1;
  if (has_source_device()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->source_device(), target);
  }
  
  // required int32 can_status = 2 [default = 0];
  if (has_can_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->can_status(), target);
  }
  
  // required int32 sensorpresent = 3;
  if (has_sensorpresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sensorpresent(), target);
  }
  
  // required .common_sensors.SMSPackage.SensorStatus.EthernetStatus ethernet_status = 4 [default = UNKNOWN_ERROR];
  if (has_ethernet_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ethernet_status(), target);
  }
  
  // required int32 sensor_timestamp = 5;
  if (has_sensor_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sensor_timestamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMSPackage_SensorStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 source_device = 1;
    if (has_source_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_device());
    }
    
    // required int32 can_status = 2 [default = 0];
    if (has_can_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->can_status());
    }
    
    // required int32 sensorpresent = 3;
    if (has_sensorpresent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sensorpresent());
    }
    
    // required .common_sensors.SMSPackage.SensorStatus.EthernetStatus ethernet_status = 4 [default = UNKNOWN_ERROR];
    if (has_ethernet_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ethernet_status());
    }
    
    // required int32 sensor_timestamp = 5;
    if (has_sensor_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sensor_timestamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMSPackage_SensorStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMSPackage_SensorStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMSPackage_SensorStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMSPackage_SensorStatus::MergeFrom(const SMSPackage_SensorStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source_device()) {
      set_source_device(from.source_device());
    }
    if (from.has_can_status()) {
      set_can_status(from.can_status());
    }
    if (from.has_sensorpresent()) {
      set_sensorpresent(from.sensorpresent());
    }
    if (from.has_ethernet_status()) {
      set_ethernet_status(from.ethernet_status());
    }
    if (from.has_sensor_timestamp()) {
      set_sensor_timestamp(from.sensor_timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMSPackage_SensorStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSPackage_SensorStatus::CopyFrom(const SMSPackage_SensorStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSPackage_SensorStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void SMSPackage_SensorStatus::Swap(SMSPackage_SensorStatus* other) {
  if (other != this) {
    std::swap(source_device_, other->source_device_);
    std::swap(can_status_, other->can_status_);
    std::swap(sensorpresent_, other->sensorpresent_);
    std::swap(ethernet_status_, other->ethernet_status_);
    std::swap(sensor_timestamp_, other->sensor_timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMSPackage_SensorStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMSPackage_SensorStatus_descriptor_;
  metadata.reflection = SMSPackage_SensorStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SMSPackage_ObjData::kObjIdFieldNumber;
const int SMSPackage_ObjData::kXFieldNumber;
const int SMSPackage_ObjData::kYFieldNumber;
const int SMSPackage_ObjData::kVxFieldNumber;
const int SMSPackage_ObjData::kVyFieldNumber;
const int SMSPackage_ObjData::kLengthObjFieldNumber;
#endif  // !_MSC_VER

SMSPackage_ObjData::SMSPackage_ObjData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMSPackage_ObjData::InitAsDefaultInstance() {
}

SMSPackage_ObjData::SMSPackage_ObjData(const SMSPackage_ObjData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMSPackage_ObjData::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = 0;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
  length_obj_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMSPackage_ObjData::~SMSPackage_ObjData() {
  SharedDtor();
}

void SMSPackage_ObjData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SMSPackage_ObjData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMSPackage_ObjData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSPackage_ObjData_descriptor_;
}

const SMSPackage_ObjData& SMSPackage_ObjData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SMSPackage_ObjData* SMSPackage_ObjData::default_instance_ = NULL;

SMSPackage_ObjData* SMSPackage_ObjData::New() const {
  return new SMSPackage_ObjData;
}

void SMSPackage_ObjData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = 0;
    x_ = 0;
    y_ = 0;
    vx_ = 0;
    vy_ = 0;
    length_obj_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMSPackage_ObjData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }
      
      // required double x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }
      
      // required double y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vx;
        break;
      }
      
      // required double vx = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_vy;
        break;
      }
      
      // required double vy = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_length_obj;
        break;
      }
      
      // required double length_obj = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_length_obj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_obj_)));
          set_has_length_obj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMSPackage_ObjData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj_id(), output);
  }
  
  // required double x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }
  
  // required double y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }
  
  // required double vx = 4 [default = 0];
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vx(), output);
  }
  
  // required double vy = 5 [default = 0];
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->vy(), output);
  }
  
  // required double length_obj = 6 [default = 0];
  if (has_length_obj()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length_obj(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMSPackage_ObjData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obj_id(), target);
  }
  
  // required double x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }
  
  // required double y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }
  
  // required double vx = 4 [default = 0];
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vx(), target);
  }
  
  // required double vy = 5 [default = 0];
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->vy(), target);
  }
  
  // required double length_obj = 6 [default = 0];
  if (has_length_obj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length_obj(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMSPackage_ObjData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }
    
    // required double x = 2;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 3;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double vx = 4 [default = 0];
    if (has_vx()) {
      total_size += 1 + 8;
    }
    
    // required double vy = 5 [default = 0];
    if (has_vy()) {
      total_size += 1 + 8;
    }
    
    // required double length_obj = 6 [default = 0];
    if (has_length_obj()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMSPackage_ObjData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMSPackage_ObjData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMSPackage_ObjData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMSPackage_ObjData::MergeFrom(const SMSPackage_ObjData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_length_obj()) {
      set_length_obj(from.length_obj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMSPackage_ObjData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSPackage_ObjData::CopyFrom(const SMSPackage_ObjData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSPackage_ObjData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SMSPackage_ObjData::Swap(SMSPackage_ObjData* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(length_obj_, other->length_obj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMSPackage_ObjData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMSPackage_ObjData_descriptor_;
  metadata.reflection = SMSPackage_ObjData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SMSPackage::kTMsRcvEpochFieldNumber;
const int SMSPackage::kNobjsFieldNumber;
const int SMSPackage::kModeFieldNumber;
const int SMSPackage::kNcyclecntFieldNumber;
const int SMSPackage::kNtscanmsFieldNumber;
const int SMSPackage::kSensorStatusFieldNumber;
const int SMSPackage::kObjDataFieldNumber;
#endif  // !_MSC_VER

SMSPackage::SMSPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMSPackage::InitAsDefaultInstance() {
  sensor_status_ = const_cast< ::common_sensors::SMSPackage_SensorStatus*>(&::common_sensors::SMSPackage_SensorStatus::default_instance());
}

SMSPackage::SMSPackage(const SMSPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMSPackage::SharedCtor() {
  _cached_size_ = 0;
  t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
  nobjs_ = 0;
  mode_ = 0;
  ncyclecnt_ = 0;
  ntscanms_ = 0;
  sensor_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMSPackage::~SMSPackage() {
  SharedDtor();
}

void SMSPackage::SharedDtor() {
  if (this != default_instance_) {
    delete sensor_status_;
  }
}

void SMSPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMSPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSPackage_descriptor_;
}

const SMSPackage& SMSPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SMSPackage* SMSPackage::default_instance_ = NULL;

SMSPackage* SMSPackage::New() const {
  return new SMSPackage;
}

void SMSPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
    nobjs_ = 0;
    mode_ = 0;
    ncyclecnt_ = 0;
    ntscanms_ = 0;
    if (has_sensor_status()) {
      if (sensor_status_ != NULL) sensor_status_->::common_sensors::SMSPackage_SensorStatus::Clear();
    }
  }
  obj_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMSPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 t_ms_rcv_epoch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_rcv_epoch_)));
          set_has_t_ms_rcv_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nobjs;
        break;
      }
      
      // required int32 nobjs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nobjs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nobjs_)));
          set_has_nobjs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }
      
      // required .common_sensors.SMSPackage.SimuMode mode = 3 [default = NORMAL];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common_sensors::SMSPackage_SimuMode_IsValid(value)) {
            set_mode(static_cast< ::common_sensors::SMSPackage_SimuMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ncyclecnt;
        break;
      }
      
      // required int32 ncyclecnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ncyclecnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncyclecnt_)));
          set_has_ncyclecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ntscanms;
        break;
      }
      
      // required int32 ntscanms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntscanms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntscanms_)));
          set_has_ntscanms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sensor_status;
        break;
      }
      
      // optional .common_sensors.SMSPackage.SensorStatus sensor_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sensor_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sensor_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_obj_data;
        break;
      }
      
      // repeated .common_sensors.SMSPackage.ObjData obj_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obj_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obj_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_obj_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMSPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 t_ms_rcv_epoch = 1;
  if (has_t_ms_rcv_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->t_ms_rcv_epoch(), output);
  }
  
  // required int32 nobjs = 2;
  if (has_nobjs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nobjs(), output);
  }
  
  // required .common_sensors.SMSPackage.SimuMode mode = 3 [default = NORMAL];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }
  
  // required int32 ncyclecnt = 4;
  if (has_ncyclecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ncyclecnt(), output);
  }
  
  // required int32 ntscanms = 5;
  if (has_ntscanms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ntscanms(), output);
  }
  
  // optional .common_sensors.SMSPackage.SensorStatus sensor_status = 6;
  if (has_sensor_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sensor_status(), output);
  }
  
  // repeated .common_sensors.SMSPackage.ObjData obj_data = 7;
  for (int i = 0; i < this->obj_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->obj_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMSPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 t_ms_rcv_epoch = 1;
  if (has_t_ms_rcv_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->t_ms_rcv_epoch(), target);
  }
  
  // required int32 nobjs = 2;
  if (has_nobjs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nobjs(), target);
  }
  
  // required .common_sensors.SMSPackage.SimuMode mode = 3 [default = NORMAL];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }
  
  // required int32 ncyclecnt = 4;
  if (has_ncyclecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ncyclecnt(), target);
  }
  
  // required int32 ntscanms = 5;
  if (has_ntscanms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ntscanms(), target);
  }
  
  // optional .common_sensors.SMSPackage.SensorStatus sensor_status = 6;
  if (has_sensor_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sensor_status(), target);
  }
  
  // repeated .common_sensors.SMSPackage.ObjData obj_data = 7;
  for (int i = 0; i < this->obj_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->obj_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMSPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 t_ms_rcv_epoch = 1;
    if (has_t_ms_rcv_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_rcv_epoch());
    }
    
    // required int32 nobjs = 2;
    if (has_nobjs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nobjs());
    }
    
    // required .common_sensors.SMSPackage.SimuMode mode = 3 [default = NORMAL];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }
    
    // required int32 ncyclecnt = 4;
    if (has_ncyclecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncyclecnt());
    }
    
    // required int32 ntscanms = 5;
    if (has_ntscanms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntscanms());
    }
    
    // optional .common_sensors.SMSPackage.SensorStatus sensor_status = 6;
    if (has_sensor_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sensor_status());
    }
    
  }
  // repeated .common_sensors.SMSPackage.ObjData obj_data = 7;
  total_size += 1 * this->obj_data_size();
  for (int i = 0; i < this->obj_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obj_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMSPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMSPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMSPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMSPackage::MergeFrom(const SMSPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  obj_data_.MergeFrom(from.obj_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_ms_rcv_epoch()) {
      set_t_ms_rcv_epoch(from.t_ms_rcv_epoch());
    }
    if (from.has_nobjs()) {
      set_nobjs(from.nobjs());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ncyclecnt()) {
      set_ncyclecnt(from.ncyclecnt());
    }
    if (from.has_ntscanms()) {
      set_ntscanms(from.ntscanms());
    }
    if (from.has_sensor_status()) {
      mutable_sensor_status()->::common_sensors::SMSPackage_SensorStatus::MergeFrom(from.sensor_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMSPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSPackage::CopyFrom(const SMSPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_sensor_status()) {
    if (!this->sensor_status().IsInitialized()) return false;
  }
  for (int i = 0; i < obj_data_size(); i++) {
    if (!this->obj_data(i).IsInitialized()) return false;
  }
  return true;
}

void SMSPackage::Swap(SMSPackage* other) {
  if (other != this) {
    std::swap(t_ms_rcv_epoch_, other->t_ms_rcv_epoch_);
    std::swap(nobjs_, other->nobjs_);
    std::swap(mode_, other->mode_);
    std::swap(ncyclecnt_, other->ncyclecnt_);
    std::swap(ntscanms_, other->ntscanms_);
    std::swap(sensor_status_, other->sensor_status_);
    obj_data_.Swap(&other->obj_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMSPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMSPackage_descriptor_;
  metadata.reflection = SMSPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SMSStatus::kNTotalPacketsFieldNumber;
const int SMSStatus::kNTotalErrorsFieldNumber;
const int SMSStatus::kNTotalCriticalErrorsFieldNumber;
const int SMSStatus::kLastErrorFieldNumber;
const int SMSStatus::kTMsLastCriticalErrorFieldNumber;
const int SMSStatus::kTMsLastErrorFieldNumber;
const int SMSStatus::kTMsLastValidPacketFieldNumber;
const int SMSStatus::kTMsLastSensorControlFieldNumber;
const int SMSStatus::kTMsLastObjControlFieldNumber;
const int SMSStatus::kTMsLastObjDataFieldNumber;
#endif  // !_MSC_VER

SMSStatus::SMSStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMSStatus::InitAsDefaultInstance() {
}

SMSStatus::SMSStatus(const SMSStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMSStatus::SharedCtor() {
  _cached_size_ = 0;
  n_total_packets_ = GOOGLE_LONGLONG(0);
  n_total_errors_ = GOOGLE_LONGLONG(0);
  n_total_critical_errors_ = GOOGLE_LONGLONG(0);
  last_error_ = 0;
  t_ms_last_critical_error_ = GOOGLE_LONGLONG(0);
  t_ms_last_error_ = GOOGLE_LONGLONG(0);
  t_ms_last_valid_packet_ = GOOGLE_LONGLONG(0);
  t_ms_last_sensor_control_ = GOOGLE_LONGLONG(0);
  t_ms_last_obj_control_ = GOOGLE_LONGLONG(0);
  t_ms_last_obj_data_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMSStatus::~SMSStatus() {
  SharedDtor();
}

void SMSStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SMSStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMSStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSStatus_descriptor_;
}

const SMSStatus& SMSStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SMSStatus* SMSStatus::default_instance_ = NULL;

SMSStatus* SMSStatus::New() const {
  return new SMSStatus;
}

void SMSStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n_total_packets_ = GOOGLE_LONGLONG(0);
    n_total_errors_ = GOOGLE_LONGLONG(0);
    n_total_critical_errors_ = GOOGLE_LONGLONG(0);
    last_error_ = 0;
    t_ms_last_critical_error_ = GOOGLE_LONGLONG(0);
    t_ms_last_error_ = GOOGLE_LONGLONG(0);
    t_ms_last_valid_packet_ = GOOGLE_LONGLONG(0);
    t_ms_last_sensor_control_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    t_ms_last_obj_control_ = GOOGLE_LONGLONG(0);
    t_ms_last_obj_data_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMSStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 n_total_packets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n_total_packets_)));
          set_has_n_total_packets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_n_total_errors;
        break;
      }
      
      // required int64 n_total_errors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_total_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n_total_errors_)));
          set_has_n_total_errors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_n_total_critical_errors;
        break;
      }
      
      // required int64 n_total_critical_errors = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n_total_critical_errors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &n_total_critical_errors_)));
          set_has_n_total_critical_errors();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_error;
        break;
      }
      
      // required int32 last_error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_error_)));
          set_has_last_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_t_ms_last_critical_error;
        break;
      }
      
      // required int64 t_ms_last_critical_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_critical_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_critical_error_)));
          set_has_t_ms_last_critical_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_t_ms_last_error;
        break;
      }
      
      // required int64 t_ms_last_error = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_error_)));
          set_has_t_ms_last_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_t_ms_last_valid_packet;
        break;
      }
      
      // required int64 t_ms_last_valid_packet = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_valid_packet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_valid_packet_)));
          set_has_t_ms_last_valid_packet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_t_ms_last_sensor_control;
        break;
      }
      
      // optional int64 t_ms_last_sensor_control = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_sensor_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_sensor_control_)));
          set_has_t_ms_last_sensor_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_t_ms_last_obj_control;
        break;
      }
      
      // optional int64 t_ms_last_obj_control = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_obj_control:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_obj_control_)));
          set_has_t_ms_last_obj_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_t_ms_last_obj_data;
        break;
      }
      
      // optional int64 t_ms_last_obj_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_obj_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_obj_data_)));
          set_has_t_ms_last_obj_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMSStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 n_total_packets = 1;
  if (has_n_total_packets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->n_total_packets(), output);
  }
  
  // required int64 n_total_errors = 2;
  if (has_n_total_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->n_total_errors(), output);
  }
  
  // required int64 n_total_critical_errors = 3;
  if (has_n_total_critical_errors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->n_total_critical_errors(), output);
  }
  
  // required int32 last_error = 4;
  if (has_last_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_error(), output);
  }
  
  // required int64 t_ms_last_critical_error = 5;
  if (has_t_ms_last_critical_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->t_ms_last_critical_error(), output);
  }
  
  // required int64 t_ms_last_error = 6;
  if (has_t_ms_last_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->t_ms_last_error(), output);
  }
  
  // required int64 t_ms_last_valid_packet = 7;
  if (has_t_ms_last_valid_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->t_ms_last_valid_packet(), output);
  }
  
  // optional int64 t_ms_last_sensor_control = 8;
  if (has_t_ms_last_sensor_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->t_ms_last_sensor_control(), output);
  }
  
  // optional int64 t_ms_last_obj_control = 9;
  if (has_t_ms_last_obj_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->t_ms_last_obj_control(), output);
  }
  
  // optional int64 t_ms_last_obj_data = 10;
  if (has_t_ms_last_obj_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->t_ms_last_obj_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMSStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 n_total_packets = 1;
  if (has_n_total_packets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->n_total_packets(), target);
  }
  
  // required int64 n_total_errors = 2;
  if (has_n_total_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->n_total_errors(), target);
  }
  
  // required int64 n_total_critical_errors = 3;
  if (has_n_total_critical_errors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->n_total_critical_errors(), target);
  }
  
  // required int32 last_error = 4;
  if (has_last_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->last_error(), target);
  }
  
  // required int64 t_ms_last_critical_error = 5;
  if (has_t_ms_last_critical_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->t_ms_last_critical_error(), target);
  }
  
  // required int64 t_ms_last_error = 6;
  if (has_t_ms_last_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->t_ms_last_error(), target);
  }
  
  // required int64 t_ms_last_valid_packet = 7;
  if (has_t_ms_last_valid_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->t_ms_last_valid_packet(), target);
  }
  
  // optional int64 t_ms_last_sensor_control = 8;
  if (has_t_ms_last_sensor_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->t_ms_last_sensor_control(), target);
  }
  
  // optional int64 t_ms_last_obj_control = 9;
  if (has_t_ms_last_obj_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->t_ms_last_obj_control(), target);
  }
  
  // optional int64 t_ms_last_obj_data = 10;
  if (has_t_ms_last_obj_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->t_ms_last_obj_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMSStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 n_total_packets = 1;
    if (has_n_total_packets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n_total_packets());
    }
    
    // required int64 n_total_errors = 2;
    if (has_n_total_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n_total_errors());
    }
    
    // required int64 n_total_critical_errors = 3;
    if (has_n_total_critical_errors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->n_total_critical_errors());
    }
    
    // required int32 last_error = 4;
    if (has_last_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_error());
    }
    
    // required int64 t_ms_last_critical_error = 5;
    if (has_t_ms_last_critical_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_critical_error());
    }
    
    // required int64 t_ms_last_error = 6;
    if (has_t_ms_last_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_error());
    }
    
    // required int64 t_ms_last_valid_packet = 7;
    if (has_t_ms_last_valid_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_valid_packet());
    }
    
    // optional int64 t_ms_last_sensor_control = 8;
    if (has_t_ms_last_sensor_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_sensor_control());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 t_ms_last_obj_control = 9;
    if (has_t_ms_last_obj_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_obj_control());
    }
    
    // optional int64 t_ms_last_obj_data = 10;
    if (has_t_ms_last_obj_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_obj_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMSStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMSStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMSStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMSStatus::MergeFrom(const SMSStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n_total_packets()) {
      set_n_total_packets(from.n_total_packets());
    }
    if (from.has_n_total_errors()) {
      set_n_total_errors(from.n_total_errors());
    }
    if (from.has_n_total_critical_errors()) {
      set_n_total_critical_errors(from.n_total_critical_errors());
    }
    if (from.has_last_error()) {
      set_last_error(from.last_error());
    }
    if (from.has_t_ms_last_critical_error()) {
      set_t_ms_last_critical_error(from.t_ms_last_critical_error());
    }
    if (from.has_t_ms_last_error()) {
      set_t_ms_last_error(from.t_ms_last_error());
    }
    if (from.has_t_ms_last_valid_packet()) {
      set_t_ms_last_valid_packet(from.t_ms_last_valid_packet());
    }
    if (from.has_t_ms_last_sensor_control()) {
      set_t_ms_last_sensor_control(from.t_ms_last_sensor_control());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_t_ms_last_obj_control()) {
      set_t_ms_last_obj_control(from.t_ms_last_obj_control());
    }
    if (from.has_t_ms_last_obj_data()) {
      set_t_ms_last_obj_data(from.t_ms_last_obj_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMSStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSStatus::CopyFrom(const SMSStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void SMSStatus::Swap(SMSStatus* other) {
  if (other != this) {
    std::swap(n_total_packets_, other->n_total_packets_);
    std::swap(n_total_errors_, other->n_total_errors_);
    std::swap(n_total_critical_errors_, other->n_total_critical_errors_);
    std::swap(last_error_, other->last_error_);
    std::swap(t_ms_last_critical_error_, other->t_ms_last_critical_error_);
    std::swap(t_ms_last_error_, other->t_ms_last_error_);
    std::swap(t_ms_last_valid_packet_, other->t_ms_last_valid_packet_);
    std::swap(t_ms_last_sensor_control_, other->t_ms_last_sensor_control_);
    std::swap(t_ms_last_obj_control_, other->t_ms_last_obj_control_);
    std::swap(t_ms_last_obj_data_, other->t_ms_last_obj_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMSStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMSStatus_descriptor_;
  metadata.reflection = SMSStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SignalPhase_InterStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalPhase_InterStatus_descriptor_;
}
bool SignalPhase_InterStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalPhase_InterStatus SignalPhase::UNKNOWN;
const SignalPhase_InterStatus SignalPhase::FLASHING;
const SignalPhase_InterStatus SignalPhase::NORMAL;
const SignalPhase_InterStatus SignalPhase::InterStatus_MIN;
const SignalPhase_InterStatus SignalPhase::InterStatus_MAX;
const int SignalPhase::InterStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* SignalPhase_PhaseColor_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalPhase_PhaseColor_descriptor_;
}
bool SignalPhase_PhaseColor_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SignalPhase_PhaseColor SignalPhase::GREEN;
const SignalPhase_PhaseColor SignalPhase::YELLOW;
const SignalPhase_PhaseColor SignalPhase::RED;
const SignalPhase_PhaseColor SignalPhase::COLOR_UNKNOWN;
const SignalPhase_PhaseColor SignalPhase::PhaseColor_MIN;
const SignalPhase_PhaseColor SignalPhase::PhaseColor_MAX;
const int SignalPhase::PhaseColor_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SignalPhase_PhaseStatus::kPhaseIdFieldNumber;
const int SignalPhase_PhaseStatus::kColorFieldNumber;
#endif  // !_MSC_VER

SignalPhase_PhaseStatus::SignalPhase_PhaseStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalPhase_PhaseStatus::InitAsDefaultInstance() {
}

SignalPhase_PhaseStatus::SignalPhase_PhaseStatus(const SignalPhase_PhaseStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalPhase_PhaseStatus::SharedCtor() {
  _cached_size_ = 0;
  phase_id_ = 0;
  color_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalPhase_PhaseStatus::~SignalPhase_PhaseStatus() {
  SharedDtor();
}

void SignalPhase_PhaseStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalPhase_PhaseStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalPhase_PhaseStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalPhase_PhaseStatus_descriptor_;
}

const SignalPhase_PhaseStatus& SignalPhase_PhaseStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SignalPhase_PhaseStatus* SignalPhase_PhaseStatus::default_instance_ = NULL;

SignalPhase_PhaseStatus* SignalPhase_PhaseStatus::New() const {
  return new SignalPhase_PhaseStatus;
}

void SignalPhase_PhaseStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phase_id_ = 0;
    color_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalPhase_PhaseStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 phase_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_id_)));
          set_has_phase_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // required .common_sensors.SignalPhase.PhaseColor color = 2 [default = COLOR_UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common_sensors::SignalPhase_PhaseColor_IsValid(value)) {
            set_color(static_cast< ::common_sensors::SignalPhase_PhaseColor >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalPhase_PhaseStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 phase_id = 1;
  if (has_phase_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->phase_id(), output);
  }
  
  // required .common_sensors.SignalPhase.PhaseColor color = 2 [default = COLOR_UNKNOWN];
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalPhase_PhaseStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 phase_id = 1;
  if (has_phase_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->phase_id(), target);
  }
  
  // required .common_sensors.SignalPhase.PhaseColor color = 2 [default = COLOR_UNKNOWN];
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalPhase_PhaseStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 phase_id = 1;
    if (has_phase_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phase_id());
    }
    
    // required .common_sensors.SignalPhase.PhaseColor color = 2 [default = COLOR_UNKNOWN];
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalPhase_PhaseStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalPhase_PhaseStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalPhase_PhaseStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalPhase_PhaseStatus::MergeFrom(const SignalPhase_PhaseStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phase_id()) {
      set_phase_id(from.phase_id());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalPhase_PhaseStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalPhase_PhaseStatus::CopyFrom(const SignalPhase_PhaseStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPhase_PhaseStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SignalPhase_PhaseStatus::Swap(SignalPhase_PhaseStatus* other) {
  if (other != this) {
    std::swap(phase_id_, other->phase_id_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalPhase_PhaseStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalPhase_PhaseStatus_descriptor_;
  metadata.reflection = SignalPhase_PhaseStatus_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SignalPhase::kTMsRcvEpochFieldNumber;
const int SignalPhase::kStatusFieldNumber;
const int SignalPhase::kPhaseStatusFieldNumber;
#endif  // !_MSC_VER

SignalPhase::SignalPhase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalPhase::InitAsDefaultInstance() {
}

SignalPhase::SignalPhase(const SignalPhase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalPhase::SharedCtor() {
  _cached_size_ = 0;
  t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalPhase::~SignalPhase() {
  SharedDtor();
}

void SignalPhase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignalPhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalPhase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalPhase_descriptor_;
}

const SignalPhase& SignalPhase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SignalPhase* SignalPhase::default_instance_ = NULL;

SignalPhase* SignalPhase::New() const {
  return new SignalPhase;
}

void SignalPhase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  phase_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 t_ms_rcv_epoch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_rcv_epoch_)));
          set_has_t_ms_rcv_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // required .common_sensors.SignalPhase.InterStatus status = 2 [default = UNKNOWN];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common_sensors::SignalPhase_InterStatus_IsValid(value)) {
            set_status(static_cast< ::common_sensors::SignalPhase_InterStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phase_status;
        break;
      }
      
      // repeated .common_sensors.SignalPhase.PhaseStatus phase_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phase_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phase_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_phase_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 t_ms_rcv_epoch = 1;
  if (has_t_ms_rcv_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->t_ms_rcv_epoch(), output);
  }
  
  // required .common_sensors.SignalPhase.InterStatus status = 2 [default = UNKNOWN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // repeated .common_sensors.SignalPhase.PhaseStatus phase_status = 3;
  for (int i = 0; i < this->phase_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->phase_status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalPhase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 t_ms_rcv_epoch = 1;
  if (has_t_ms_rcv_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->t_ms_rcv_epoch(), target);
  }
  
  // required .common_sensors.SignalPhase.InterStatus status = 2 [default = UNKNOWN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // repeated .common_sensors.SignalPhase.PhaseStatus phase_status = 3;
  for (int i = 0; i < this->phase_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->phase_status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalPhase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 t_ms_rcv_epoch = 1;
    if (has_t_ms_rcv_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_rcv_epoch());
    }
    
    // required .common_sensors.SignalPhase.InterStatus status = 2 [default = UNKNOWN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
  }
  // repeated .common_sensors.SignalPhase.PhaseStatus phase_status = 3;
  total_size += 1 * this->phase_status_size();
  for (int i = 0; i < this->phase_status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phase_status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalPhase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalPhase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalPhase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalPhase::MergeFrom(const SignalPhase& from) {
  GOOGLE_CHECK_NE(&from, this);
  phase_status_.MergeFrom(from.phase_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t_ms_rcv_epoch()) {
      set_t_ms_rcv_epoch(from.t_ms_rcv_epoch());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalPhase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalPhase::CopyFrom(const SignalPhase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalPhase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < phase_status_size(); i++) {
    if (!this->phase_status(i).IsInitialized()) return false;
  }
  return true;
}

void SignalPhase::Swap(SignalPhase* other) {
  if (other != this) {
    std::swap(t_ms_rcv_epoch_, other->t_ms_rcv_epoch_);
    std::swap(status_, other->status_);
    phase_status_.Swap(&other->phase_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalPhase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalPhase_descriptor_;
  metadata.reflection = SignalPhase_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ECLCommStatus_CommStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECLCommStatus_CommStatus_descriptor_;
}
bool ECLCommStatus_CommStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ECLCommStatus_CommStatus ECLCommStatus::OK;
const ECLCommStatus_CommStatus ECLCommStatus::UDP_BIND_ERROR;
const ECLCommStatus_CommStatus ECLCommStatus::UDP_OTHER_ERROR;
const ECLCommStatus_CommStatus ECLCommStatus::ERROR_OUTDATED;
const ECLCommStatus_CommStatus ECLCommStatus::ERROR_PACKET_FORMAT;
const ECLCommStatus_CommStatus ECLCommStatus::UNKNOWN_ERROR;
const ECLCommStatus_CommStatus ECLCommStatus::CommStatus_MIN;
const ECLCommStatus_CommStatus ECLCommStatus::CommStatus_MAX;
const int ECLCommStatus::CommStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ECLCommStatus::kLastErrorStatusFieldNumber;
const int ECLCommStatus::kTMsLastUpdateFieldNumber;
const int ECLCommStatus::kTMsLastErrorFieldNumber;
#endif  // !_MSC_VER

ECLCommStatus::ECLCommStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ECLCommStatus::InitAsDefaultInstance() {
}

ECLCommStatus::ECLCommStatus(const ECLCommStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ECLCommStatus::SharedCtor() {
  _cached_size_ = 0;
  last_error_status_ = 0;
  t_ms_last_update_ = GOOGLE_LONGLONG(0);
  t_ms_last_error_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ECLCommStatus::~ECLCommStatus() {
  SharedDtor();
}

void ECLCommStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ECLCommStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ECLCommStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECLCommStatus_descriptor_;
}

const ECLCommStatus& ECLCommStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

ECLCommStatus* ECLCommStatus::default_instance_ = NULL;

ECLCommStatus* ECLCommStatus::New() const {
  return new ECLCommStatus;
}

void ECLCommStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_error_status_ = 0;
    t_ms_last_update_ = GOOGLE_LONGLONG(0);
    t_ms_last_error_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ECLCommStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common_sensors.ECLCommStatus.CommStatus last_error_status = 1 [default = OK];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common_sensors::ECLCommStatus_CommStatus_IsValid(value)) {
            set_last_error_status(static_cast< ::common_sensors::ECLCommStatus_CommStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t_ms_last_update;
        break;
      }
      
      // optional int64 t_ms_last_update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_update_)));
          set_has_t_ms_last_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_t_ms_last_error;
        break;
      }
      
      // optional int64 t_ms_last_error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_last_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_last_error_)));
          set_has_t_ms_last_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ECLCommStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .common_sensors.ECLCommStatus.CommStatus last_error_status = 1 [default = OK];
  if (has_last_error_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->last_error_status(), output);
  }
  
  // optional int64 t_ms_last_update = 2;
  if (has_t_ms_last_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t_ms_last_update(), output);
  }
  
  // optional int64 t_ms_last_error = 3;
  if (has_t_ms_last_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->t_ms_last_error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ECLCommStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .common_sensors.ECLCommStatus.CommStatus last_error_status = 1 [default = OK];
  if (has_last_error_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->last_error_status(), target);
  }
  
  // optional int64 t_ms_last_update = 2;
  if (has_t_ms_last_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t_ms_last_update(), target);
  }
  
  // optional int64 t_ms_last_error = 3;
  if (has_t_ms_last_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->t_ms_last_error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ECLCommStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .common_sensors.ECLCommStatus.CommStatus last_error_status = 1 [default = OK];
    if (has_last_error_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_error_status());
    }
    
    // optional int64 t_ms_last_update = 2;
    if (has_t_ms_last_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_update());
    }
    
    // optional int64 t_ms_last_error = 3;
    if (has_t_ms_last_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_last_error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECLCommStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ECLCommStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ECLCommStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ECLCommStatus::MergeFrom(const ECLCommStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_error_status()) {
      set_last_error_status(from.last_error_status());
    }
    if (from.has_t_ms_last_update()) {
      set_t_ms_last_update(from.t_ms_last_update());
    }
    if (from.has_t_ms_last_error()) {
      set_t_ms_last_error(from.t_ms_last_error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ECLCommStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECLCommStatus::CopyFrom(const ECLCommStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECLCommStatus::IsInitialized() const {
  
  return true;
}

void ECLCommStatus::Swap(ECLCommStatus* other) {
  if (other != this) {
    std::swap(last_error_status_, other->last_error_status_);
    std::swap(t_ms_last_update_, other->t_ms_last_update_);
    std::swap(t_ms_last_error_, other->t_ms_last_error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ECLCommStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ECLCommStatus_descriptor_;
  metadata.reflection = ECLCommStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SMSSPaT::kIntersectionIdFieldNumber;
const int SMSSPaT::kTMsRcvEpochFieldNumber;
const int SMSSPaT::kSignalPhaseFieldNumber;
const int SMSSPaT::kEclStatusFieldNumber;
const int SMSSPaT::kSmsPackageFieldNumber;
const int SMSSPaT::kSmsStatusFieldNumber;
#endif  // !_MSC_VER

SMSSPaT::SMSSPaT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SMSSPaT::InitAsDefaultInstance() {
  signal_phase_ = const_cast< ::common_sensors::SignalPhase*>(&::common_sensors::SignalPhase::default_instance());
  ecl_status_ = const_cast< ::common_sensors::ECLCommStatus*>(&::common_sensors::ECLCommStatus::default_instance());
  sms_package_ = const_cast< ::common_sensors::SMSPackage*>(&::common_sensors::SMSPackage::default_instance());
  sms_status_ = const_cast< ::common_sensors::SMSStatus*>(&::common_sensors::SMSStatus::default_instance());
}

SMSSPaT::SMSSPaT(const SMSSPaT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SMSSPaT::SharedCtor() {
  _cached_size_ = 0;
  intersection_id_ = 0;
  t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
  signal_phase_ = NULL;
  ecl_status_ = NULL;
  sms_package_ = NULL;
  sms_status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SMSSPaT::~SMSSPaT() {
  SharedDtor();
}

void SMSSPaT::SharedDtor() {
  if (this != default_instance_) {
    delete signal_phase_;
    delete ecl_status_;
    delete sms_package_;
    delete sms_status_;
  }
}

void SMSSPaT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SMSSPaT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SMSSPaT_descriptor_;
}

const SMSSPaT& SMSSPaT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sms_2dSPaT_2eproto();  return *default_instance_;
}

SMSSPaT* SMSSPaT::default_instance_ = NULL;

SMSSPaT* SMSSPaT::New() const {
  return new SMSSPaT;
}

void SMSSPaT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    intersection_id_ = 0;
    t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
    if (has_signal_phase()) {
      if (signal_phase_ != NULL) signal_phase_->::common_sensors::SignalPhase::Clear();
    }
    if (has_ecl_status()) {
      if (ecl_status_ != NULL) ecl_status_->::common_sensors::ECLCommStatus::Clear();
    }
    if (has_sms_package()) {
      if (sms_package_ != NULL) sms_package_->::common_sensors::SMSPackage::Clear();
    }
    if (has_sms_status()) {
      if (sms_status_ != NULL) sms_status_->::common_sensors::SMSStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SMSSPaT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 intersection_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intersection_id_)));
          set_has_intersection_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_t_ms_rcv_epoch;
        break;
      }
      
      // required int64 t_ms_rcv_epoch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_t_ms_rcv_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t_ms_rcv_epoch_)));
          set_has_t_ms_rcv_epoch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signal_phase;
        break;
      }
      
      // optional .common_sensors.SignalPhase signal_phase = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signal_phase:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal_phase()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ecl_status;
        break;
      }
      
      // optional .common_sensors.ECLCommStatus ecl_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ecl_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecl_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_sms_package;
        break;
      }
      
      // optional .common_sensors.SMSPackage sms_package = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sms_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sms_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sms_status;
        break;
      }
      
      // optional .common_sensors.SMSStatus sms_status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sms_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sms_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SMSSPaT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 intersection_id = 1;
  if (has_intersection_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->intersection_id(), output);
  }
  
  // required int64 t_ms_rcv_epoch = 2;
  if (has_t_ms_rcv_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t_ms_rcv_epoch(), output);
  }
  
  // optional .common_sensors.SignalPhase signal_phase = 3;
  if (has_signal_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signal_phase(), output);
  }
  
  // optional .common_sensors.ECLCommStatus ecl_status = 4;
  if (has_ecl_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ecl_status(), output);
  }
  
  // optional .common_sensors.SMSPackage sms_package = 5;
  if (has_sms_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sms_package(), output);
  }
  
  // optional .common_sensors.SMSStatus sms_status = 6;
  if (has_sms_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sms_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SMSSPaT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 intersection_id = 1;
  if (has_intersection_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->intersection_id(), target);
  }
  
  // required int64 t_ms_rcv_epoch = 2;
  if (has_t_ms_rcv_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t_ms_rcv_epoch(), target);
  }
  
  // optional .common_sensors.SignalPhase signal_phase = 3;
  if (has_signal_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signal_phase(), target);
  }
  
  // optional .common_sensors.ECLCommStatus ecl_status = 4;
  if (has_ecl_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ecl_status(), target);
  }
  
  // optional .common_sensors.SMSPackage sms_package = 5;
  if (has_sms_package()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sms_package(), target);
  }
  
  // optional .common_sensors.SMSStatus sms_status = 6;
  if (has_sms_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sms_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SMSSPaT::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 intersection_id = 1;
    if (has_intersection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intersection_id());
    }
    
    // required int64 t_ms_rcv_epoch = 2;
    if (has_t_ms_rcv_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->t_ms_rcv_epoch());
    }
    
    // optional .common_sensors.SignalPhase signal_phase = 3;
    if (has_signal_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal_phase());
    }
    
    // optional .common_sensors.ECLCommStatus ecl_status = 4;
    if (has_ecl_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ecl_status());
    }
    
    // optional .common_sensors.SMSPackage sms_package = 5;
    if (has_sms_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sms_package());
    }
    
    // optional .common_sensors.SMSStatus sms_status = 6;
    if (has_sms_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sms_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMSSPaT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SMSSPaT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SMSSPaT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SMSSPaT::MergeFrom(const SMSSPaT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intersection_id()) {
      set_intersection_id(from.intersection_id());
    }
    if (from.has_t_ms_rcv_epoch()) {
      set_t_ms_rcv_epoch(from.t_ms_rcv_epoch());
    }
    if (from.has_signal_phase()) {
      mutable_signal_phase()->::common_sensors::SignalPhase::MergeFrom(from.signal_phase());
    }
    if (from.has_ecl_status()) {
      mutable_ecl_status()->::common_sensors::ECLCommStatus::MergeFrom(from.ecl_status());
    }
    if (from.has_sms_package()) {
      mutable_sms_package()->::common_sensors::SMSPackage::MergeFrom(from.sms_package());
    }
    if (from.has_sms_status()) {
      mutable_sms_status()->::common_sensors::SMSStatus::MergeFrom(from.sms_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SMSSPaT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SMSSPaT::CopyFrom(const SMSSPaT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMSSPaT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_signal_phase()) {
    if (!this->signal_phase().IsInitialized()) return false;
  }
  if (has_sms_package()) {
    if (!this->sms_package().IsInitialized()) return false;
  }
  if (has_sms_status()) {
    if (!this->sms_status().IsInitialized()) return false;
  }
  return true;
}

void SMSSPaT::Swap(SMSSPaT* other) {
  if (other != this) {
    std::swap(intersection_id_, other->intersection_id_);
    std::swap(t_ms_rcv_epoch_, other->t_ms_rcv_epoch_);
    std::swap(signal_phase_, other->signal_phase_);
    std::swap(ecl_status_, other->ecl_status_);
    std::swap(sms_package_, other->sms_package_);
    std::swap(sms_status_, other->sms_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SMSSPaT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SMSSPaT_descriptor_;
  metadata.reflection = SMSSPaT_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common_sensors

// @@protoc_insertion_point(global_scope)
