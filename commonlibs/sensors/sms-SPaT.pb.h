// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sms-SPaT.proto

#ifndef PROTOBUF_sms_2dSPaT_2eproto__INCLUDED
#define PROTOBUF_sms_2dSPaT_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace common_sensors {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sms_2dSPaT_2eproto();
void protobuf_AssignDesc_sms_2dSPaT_2eproto();
void protobuf_ShutdownFile_sms_2dSPaT_2eproto();

class SMSPackage;
class SMSPackage_SensorStatus;
class SMSPackage_ObjData;
class SMSStatus;
class SignalPhase;
class SignalPhase_PhaseStatus;
class ECLCommStatus;
class SMSSPaT;

enum SMSPackage_SensorStatus_EthernetStatus {
  SMSPackage_SensorStatus_EthernetStatus_NOTCONNECT = 0,
  SMSPackage_SensorStatus_EthernetStatus_CONNECTING = 1,
  SMSPackage_SensorStatus_EthernetStatus_ISCONNECT = 2,
  SMSPackage_SensorStatus_EthernetStatus_RELIEVE_ERROR = 3,
  SMSPackage_SensorStatus_EthernetStatus_ERROR_STATE = 4,
  SMSPackage_SensorStatus_EthernetStatus_WAIT_OF_REPEAT_DATA = 5,
  SMSPackage_SensorStatus_EthernetStatus_UNKNOWN_ERROR = 6
};
bool SMSPackage_SensorStatus_EthernetStatus_IsValid(int value);
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_MIN = SMSPackage_SensorStatus_EthernetStatus_NOTCONNECT;
const SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_MAX = SMSPackage_SensorStatus_EthernetStatus_UNKNOWN_ERROR;
const int SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_ARRAYSIZE = SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SMSPackage_SensorStatus_EthernetStatus_descriptor();
inline const ::std::string& SMSPackage_SensorStatus_EthernetStatus_Name(SMSPackage_SensorStatus_EthernetStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SMSPackage_SensorStatus_EthernetStatus_descriptor(), value);
}
inline bool SMSPackage_SensorStatus_EthernetStatus_Parse(
    const ::std::string& name, SMSPackage_SensorStatus_EthernetStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SMSPackage_SensorStatus_EthernetStatus>(
    SMSPackage_SensorStatus_EthernetStatus_descriptor(), name, value);
}
enum SMSPackage_SimuMode {
  SMSPackage_SimuMode_NORMAL = 0,
  SMSPackage_SimuMode_SIMU = 4
};
bool SMSPackage_SimuMode_IsValid(int value);
const SMSPackage_SimuMode SMSPackage_SimuMode_SimuMode_MIN = SMSPackage_SimuMode_NORMAL;
const SMSPackage_SimuMode SMSPackage_SimuMode_SimuMode_MAX = SMSPackage_SimuMode_SIMU;
const int SMSPackage_SimuMode_SimuMode_ARRAYSIZE = SMSPackage_SimuMode_SimuMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* SMSPackage_SimuMode_descriptor();
inline const ::std::string& SMSPackage_SimuMode_Name(SMSPackage_SimuMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    SMSPackage_SimuMode_descriptor(), value);
}
inline bool SMSPackage_SimuMode_Parse(
    const ::std::string& name, SMSPackage_SimuMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SMSPackage_SimuMode>(
    SMSPackage_SimuMode_descriptor(), name, value);
}
enum SignalPhase_InterStatus {
  SignalPhase_InterStatus_UNKNOWN = 0,
  SignalPhase_InterStatus_FLASHING = 1,
  SignalPhase_InterStatus_NORMAL = 2
};
bool SignalPhase_InterStatus_IsValid(int value);
const SignalPhase_InterStatus SignalPhase_InterStatus_InterStatus_MIN = SignalPhase_InterStatus_UNKNOWN;
const SignalPhase_InterStatus SignalPhase_InterStatus_InterStatus_MAX = SignalPhase_InterStatus_NORMAL;
const int SignalPhase_InterStatus_InterStatus_ARRAYSIZE = SignalPhase_InterStatus_InterStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignalPhase_InterStatus_descriptor();
inline const ::std::string& SignalPhase_InterStatus_Name(SignalPhase_InterStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignalPhase_InterStatus_descriptor(), value);
}
inline bool SignalPhase_InterStatus_Parse(
    const ::std::string& name, SignalPhase_InterStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalPhase_InterStatus>(
    SignalPhase_InterStatus_descriptor(), name, value);
}
enum SignalPhase_PhaseColor {
  SignalPhase_PhaseColor_GREEN = 1,
  SignalPhase_PhaseColor_YELLOW = 2,
  SignalPhase_PhaseColor_RED = 3,
  SignalPhase_PhaseColor_COLOR_UNKNOWN = 4
};
bool SignalPhase_PhaseColor_IsValid(int value);
const SignalPhase_PhaseColor SignalPhase_PhaseColor_PhaseColor_MIN = SignalPhase_PhaseColor_GREEN;
const SignalPhase_PhaseColor SignalPhase_PhaseColor_PhaseColor_MAX = SignalPhase_PhaseColor_COLOR_UNKNOWN;
const int SignalPhase_PhaseColor_PhaseColor_ARRAYSIZE = SignalPhase_PhaseColor_PhaseColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* SignalPhase_PhaseColor_descriptor();
inline const ::std::string& SignalPhase_PhaseColor_Name(SignalPhase_PhaseColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    SignalPhase_PhaseColor_descriptor(), value);
}
inline bool SignalPhase_PhaseColor_Parse(
    const ::std::string& name, SignalPhase_PhaseColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalPhase_PhaseColor>(
    SignalPhase_PhaseColor_descriptor(), name, value);
}
enum ECLCommStatus_CommStatus {
  ECLCommStatus_CommStatus_OK = 0,
  ECLCommStatus_CommStatus_UDP_BIND_ERROR = 1,
  ECLCommStatus_CommStatus_UDP_OTHER_ERROR = 2,
  ECLCommStatus_CommStatus_ERROR_OUTDATED = 3,
  ECLCommStatus_CommStatus_ERROR_PACKET_FORMAT = 4,
  ECLCommStatus_CommStatus_UNKNOWN_ERROR = 5
};
bool ECLCommStatus_CommStatus_IsValid(int value);
const ECLCommStatus_CommStatus ECLCommStatus_CommStatus_CommStatus_MIN = ECLCommStatus_CommStatus_OK;
const ECLCommStatus_CommStatus ECLCommStatus_CommStatus_CommStatus_MAX = ECLCommStatus_CommStatus_UNKNOWN_ERROR;
const int ECLCommStatus_CommStatus_CommStatus_ARRAYSIZE = ECLCommStatus_CommStatus_CommStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECLCommStatus_CommStatus_descriptor();
inline const ::std::string& ECLCommStatus_CommStatus_Name(ECLCommStatus_CommStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECLCommStatus_CommStatus_descriptor(), value);
}
inline bool ECLCommStatus_CommStatus_Parse(
    const ::std::string& name, ECLCommStatus_CommStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECLCommStatus_CommStatus>(
    ECLCommStatus_CommStatus_descriptor(), name, value);
}
// ===================================================================

class SMSPackage_SensorStatus : public ::google::protobuf::Message {
 public:
  SMSPackage_SensorStatus();
  virtual ~SMSPackage_SensorStatus();
  
  SMSPackage_SensorStatus(const SMSPackage_SensorStatus& from);
  
  inline SMSPackage_SensorStatus& operator=(const SMSPackage_SensorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSPackage_SensorStatus& default_instance();
  
  void Swap(SMSPackage_SensorStatus* other);
  
  // implements Message ----------------------------------------------
  
  SMSPackage_SensorStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSPackage_SensorStatus& from);
  void MergeFrom(const SMSPackage_SensorStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SMSPackage_SensorStatus_EthernetStatus EthernetStatus;
  static const EthernetStatus NOTCONNECT = SMSPackage_SensorStatus_EthernetStatus_NOTCONNECT;
  static const EthernetStatus CONNECTING = SMSPackage_SensorStatus_EthernetStatus_CONNECTING;
  static const EthernetStatus ISCONNECT = SMSPackage_SensorStatus_EthernetStatus_ISCONNECT;
  static const EthernetStatus RELIEVE_ERROR = SMSPackage_SensorStatus_EthernetStatus_RELIEVE_ERROR;
  static const EthernetStatus ERROR_STATE = SMSPackage_SensorStatus_EthernetStatus_ERROR_STATE;
  static const EthernetStatus WAIT_OF_REPEAT_DATA = SMSPackage_SensorStatus_EthernetStatus_WAIT_OF_REPEAT_DATA;
  static const EthernetStatus UNKNOWN_ERROR = SMSPackage_SensorStatus_EthernetStatus_UNKNOWN_ERROR;
  static inline bool EthernetStatus_IsValid(int value) {
    return SMSPackage_SensorStatus_EthernetStatus_IsValid(value);
  }
  static const EthernetStatus EthernetStatus_MIN =
    SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_MIN;
  static const EthernetStatus EthernetStatus_MAX =
    SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_MAX;
  static const int EthernetStatus_ARRAYSIZE =
    SMSPackage_SensorStatus_EthernetStatus_EthernetStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EthernetStatus_descriptor() {
    return SMSPackage_SensorStatus_EthernetStatus_descriptor();
  }
  static inline const ::std::string& EthernetStatus_Name(EthernetStatus value) {
    return SMSPackage_SensorStatus_EthernetStatus_Name(value);
  }
  static inline bool EthernetStatus_Parse(const ::std::string& name,
      EthernetStatus* value) {
    return SMSPackage_SensorStatus_EthernetStatus_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int32 source_device = 1;
  inline bool has_source_device() const;
  inline void clear_source_device();
  static const int kSourceDeviceFieldNumber = 1;
  inline ::google::protobuf::int32 source_device() const;
  inline void set_source_device(::google::protobuf::int32 value);
  
  // required int32 can_status = 2 [default = 0];
  inline bool has_can_status() const;
  inline void clear_can_status();
  static const int kCanStatusFieldNumber = 2;
  inline ::google::protobuf::int32 can_status() const;
  inline void set_can_status(::google::protobuf::int32 value);
  
  // required int32 sensorpresent = 3;
  inline bool has_sensorpresent() const;
  inline void clear_sensorpresent();
  static const int kSensorpresentFieldNumber = 3;
  inline ::google::protobuf::int32 sensorpresent() const;
  inline void set_sensorpresent(::google::protobuf::int32 value);
  
  // required .common_sensors.SMSPackage.SensorStatus.EthernetStatus ethernet_status = 4 [default = UNKNOWN_ERROR];
  inline bool has_ethernet_status() const;
  inline void clear_ethernet_status();
  static const int kEthernetStatusFieldNumber = 4;
  inline ::common_sensors::SMSPackage_SensorStatus_EthernetStatus ethernet_status() const;
  inline void set_ethernet_status(::common_sensors::SMSPackage_SensorStatus_EthernetStatus value);
  
  // required int32 sensor_timestamp = 5;
  inline bool has_sensor_timestamp() const;
  inline void clear_sensor_timestamp();
  static const int kSensorTimestampFieldNumber = 5;
  inline ::google::protobuf::int32 sensor_timestamp() const;
  inline void set_sensor_timestamp(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:common_sensors.SMSPackage.SensorStatus)
 private:
  inline void set_has_source_device();
  inline void clear_has_source_device();
  inline void set_has_can_status();
  inline void clear_has_can_status();
  inline void set_has_sensorpresent();
  inline void clear_has_sensorpresent();
  inline void set_has_ethernet_status();
  inline void clear_has_ethernet_status();
  inline void set_has_sensor_timestamp();
  inline void clear_has_sensor_timestamp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 source_device_;
  ::google::protobuf::int32 can_status_;
  ::google::protobuf::int32 sensorpresent_;
  int ethernet_status_;
  ::google::protobuf::int32 sensor_timestamp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SMSPackage_SensorStatus* default_instance_;
};
// -------------------------------------------------------------------

class SMSPackage_ObjData : public ::google::protobuf::Message {
 public:
  SMSPackage_ObjData();
  virtual ~SMSPackage_ObjData();
  
  SMSPackage_ObjData(const SMSPackage_ObjData& from);
  
  inline SMSPackage_ObjData& operator=(const SMSPackage_ObjData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSPackage_ObjData& default_instance();
  
  void Swap(SMSPackage_ObjData* other);
  
  // implements Message ----------------------------------------------
  
  SMSPackage_ObjData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSPackage_ObjData& from);
  void MergeFrom(const SMSPackage_ObjData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 obj_id = 1;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::int32 obj_id() const;
  inline void set_obj_id(::google::protobuf::int32 value);
  
  // required double x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline double y() const;
  inline void set_y(double value);
  
  // required double vx = 4 [default = 0];
  inline bool has_vx() const;
  inline void clear_vx();
  static const int kVxFieldNumber = 4;
  inline double vx() const;
  inline void set_vx(double value);
  
  // required double vy = 5 [default = 0];
  inline bool has_vy() const;
  inline void clear_vy();
  static const int kVyFieldNumber = 5;
  inline double vy() const;
  inline void set_vy(double value);
  
  // required double length_obj = 6 [default = 0];
  inline bool has_length_obj() const;
  inline void clear_length_obj();
  static const int kLengthObjFieldNumber = 6;
  inline double length_obj() const;
  inline void set_length_obj(double value);
  
  // @@protoc_insertion_point(class_scope:common_sensors.SMSPackage.ObjData)
 private:
  inline void set_has_obj_id();
  inline void clear_has_obj_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_vx();
  inline void clear_has_vx();
  inline void set_has_vy();
  inline void clear_has_vy();
  inline void set_has_length_obj();
  inline void clear_has_length_obj();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double vx_;
  double vy_;
  double length_obj_;
  ::google::protobuf::int32 obj_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SMSPackage_ObjData* default_instance_;
};
// -------------------------------------------------------------------

class SMSPackage : public ::google::protobuf::Message {
 public:
  SMSPackage();
  virtual ~SMSPackage();
  
  SMSPackage(const SMSPackage& from);
  
  inline SMSPackage& operator=(const SMSPackage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSPackage& default_instance();
  
  void Swap(SMSPackage* other);
  
  // implements Message ----------------------------------------------
  
  SMSPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSPackage& from);
  void MergeFrom(const SMSPackage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SMSPackage_SensorStatus SensorStatus;
  typedef SMSPackage_ObjData ObjData;
  
  typedef SMSPackage_SimuMode SimuMode;
  static const SimuMode NORMAL = SMSPackage_SimuMode_NORMAL;
  static const SimuMode SIMU = SMSPackage_SimuMode_SIMU;
  static inline bool SimuMode_IsValid(int value) {
    return SMSPackage_SimuMode_IsValid(value);
  }
  static const SimuMode SimuMode_MIN =
    SMSPackage_SimuMode_SimuMode_MIN;
  static const SimuMode SimuMode_MAX =
    SMSPackage_SimuMode_SimuMode_MAX;
  static const int SimuMode_ARRAYSIZE =
    SMSPackage_SimuMode_SimuMode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SimuMode_descriptor() {
    return SMSPackage_SimuMode_descriptor();
  }
  static inline const ::std::string& SimuMode_Name(SimuMode value) {
    return SMSPackage_SimuMode_Name(value);
  }
  static inline bool SimuMode_Parse(const ::std::string& name,
      SimuMode* value) {
    return SMSPackage_SimuMode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int64 t_ms_rcv_epoch = 1;
  inline bool has_t_ms_rcv_epoch() const;
  inline void clear_t_ms_rcv_epoch();
  static const int kTMsRcvEpochFieldNumber = 1;
  inline ::google::protobuf::int64 t_ms_rcv_epoch() const;
  inline void set_t_ms_rcv_epoch(::google::protobuf::int64 value);
  
  // required int32 nobjs = 2;
  inline bool has_nobjs() const;
  inline void clear_nobjs();
  static const int kNobjsFieldNumber = 2;
  inline ::google::protobuf::int32 nobjs() const;
  inline void set_nobjs(::google::protobuf::int32 value);
  
  // required .common_sensors.SMSPackage.SimuMode mode = 3 [default = NORMAL];
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 3;
  inline ::common_sensors::SMSPackage_SimuMode mode() const;
  inline void set_mode(::common_sensors::SMSPackage_SimuMode value);
  
  // required int32 ncyclecnt = 4;
  inline bool has_ncyclecnt() const;
  inline void clear_ncyclecnt();
  static const int kNcyclecntFieldNumber = 4;
  inline ::google::protobuf::int32 ncyclecnt() const;
  inline void set_ncyclecnt(::google::protobuf::int32 value);
  
  // required int32 ntscanms = 5;
  inline bool has_ntscanms() const;
  inline void clear_ntscanms();
  static const int kNtscanmsFieldNumber = 5;
  inline ::google::protobuf::int32 ntscanms() const;
  inline void set_ntscanms(::google::protobuf::int32 value);
  
  // optional .common_sensors.SMSPackage.SensorStatus sensor_status = 6;
  inline bool has_sensor_status() const;
  inline void clear_sensor_status();
  static const int kSensorStatusFieldNumber = 6;
  inline const ::common_sensors::SMSPackage_SensorStatus& sensor_status() const;
  inline ::common_sensors::SMSPackage_SensorStatus* mutable_sensor_status();
  inline ::common_sensors::SMSPackage_SensorStatus* release_sensor_status();
  
  // repeated .common_sensors.SMSPackage.ObjData obj_data = 7;
  inline int obj_data_size() const;
  inline void clear_obj_data();
  static const int kObjDataFieldNumber = 7;
  inline const ::common_sensors::SMSPackage_ObjData& obj_data(int index) const;
  inline ::common_sensors::SMSPackage_ObjData* mutable_obj_data(int index);
  inline ::common_sensors::SMSPackage_ObjData* add_obj_data();
  inline const ::google::protobuf::RepeatedPtrField< ::common_sensors::SMSPackage_ObjData >&
      obj_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::common_sensors::SMSPackage_ObjData >*
      mutable_obj_data();
  
  // @@protoc_insertion_point(class_scope:common_sensors.SMSPackage)
 private:
  inline void set_has_t_ms_rcv_epoch();
  inline void clear_has_t_ms_rcv_epoch();
  inline void set_has_nobjs();
  inline void clear_has_nobjs();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_ncyclecnt();
  inline void clear_has_ncyclecnt();
  inline void set_has_ntscanms();
  inline void clear_has_ntscanms();
  inline void set_has_sensor_status();
  inline void clear_has_sensor_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 t_ms_rcv_epoch_;
  ::google::protobuf::int32 nobjs_;
  int mode_;
  ::google::protobuf::int32 ncyclecnt_;
  ::google::protobuf::int32 ntscanms_;
  ::common_sensors::SMSPackage_SensorStatus* sensor_status_;
  ::google::protobuf::RepeatedPtrField< ::common_sensors::SMSPackage_ObjData > obj_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SMSPackage* default_instance_;
};
// -------------------------------------------------------------------

class SMSStatus : public ::google::protobuf::Message {
 public:
  SMSStatus();
  virtual ~SMSStatus();
  
  SMSStatus(const SMSStatus& from);
  
  inline SMSStatus& operator=(const SMSStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSStatus& default_instance();
  
  void Swap(SMSStatus* other);
  
  // implements Message ----------------------------------------------
  
  SMSStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSStatus& from);
  void MergeFrom(const SMSStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 n_total_packets = 1;
  inline bool has_n_total_packets() const;
  inline void clear_n_total_packets();
  static const int kNTotalPacketsFieldNumber = 1;
  inline ::google::protobuf::int64 n_total_packets() const;
  inline void set_n_total_packets(::google::protobuf::int64 value);
  
  // required int64 n_total_errors = 2;
  inline bool has_n_total_errors() const;
  inline void clear_n_total_errors();
  static const int kNTotalErrorsFieldNumber = 2;
  inline ::google::protobuf::int64 n_total_errors() const;
  inline void set_n_total_errors(::google::protobuf::int64 value);
  
  // required int64 n_total_critical_errors = 3;
  inline bool has_n_total_critical_errors() const;
  inline void clear_n_total_critical_errors();
  static const int kNTotalCriticalErrorsFieldNumber = 3;
  inline ::google::protobuf::int64 n_total_critical_errors() const;
  inline void set_n_total_critical_errors(::google::protobuf::int64 value);
  
  // required int32 last_error = 4;
  inline bool has_last_error() const;
  inline void clear_last_error();
  static const int kLastErrorFieldNumber = 4;
  inline ::google::protobuf::int32 last_error() const;
  inline void set_last_error(::google::protobuf::int32 value);
  
  // required int64 t_ms_last_critical_error = 5;
  inline bool has_t_ms_last_critical_error() const;
  inline void clear_t_ms_last_critical_error();
  static const int kTMsLastCriticalErrorFieldNumber = 5;
  inline ::google::protobuf::int64 t_ms_last_critical_error() const;
  inline void set_t_ms_last_critical_error(::google::protobuf::int64 value);
  
  // required int64 t_ms_last_error = 6;
  inline bool has_t_ms_last_error() const;
  inline void clear_t_ms_last_error();
  static const int kTMsLastErrorFieldNumber = 6;
  inline ::google::protobuf::int64 t_ms_last_error() const;
  inline void set_t_ms_last_error(::google::protobuf::int64 value);
  
  // required int64 t_ms_last_valid_packet = 7;
  inline bool has_t_ms_last_valid_packet() const;
  inline void clear_t_ms_last_valid_packet();
  static const int kTMsLastValidPacketFieldNumber = 7;
  inline ::google::protobuf::int64 t_ms_last_valid_packet() const;
  inline void set_t_ms_last_valid_packet(::google::protobuf::int64 value);
  
  // optional int64 t_ms_last_sensor_control = 8;
  inline bool has_t_ms_last_sensor_control() const;
  inline void clear_t_ms_last_sensor_control();
  static const int kTMsLastSensorControlFieldNumber = 8;
  inline ::google::protobuf::int64 t_ms_last_sensor_control() const;
  inline void set_t_ms_last_sensor_control(::google::protobuf::int64 value);
  
  // optional int64 t_ms_last_obj_control = 9;
  inline bool has_t_ms_last_obj_control() const;
  inline void clear_t_ms_last_obj_control();
  static const int kTMsLastObjControlFieldNumber = 9;
  inline ::google::protobuf::int64 t_ms_last_obj_control() const;
  inline void set_t_ms_last_obj_control(::google::protobuf::int64 value);
  
  // optional int64 t_ms_last_obj_data = 10;
  inline bool has_t_ms_last_obj_data() const;
  inline void clear_t_ms_last_obj_data();
  static const int kTMsLastObjDataFieldNumber = 10;
  inline ::google::protobuf::int64 t_ms_last_obj_data() const;
  inline void set_t_ms_last_obj_data(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:common_sensors.SMSStatus)
 private:
  inline void set_has_n_total_packets();
  inline void clear_has_n_total_packets();
  inline void set_has_n_total_errors();
  inline void clear_has_n_total_errors();
  inline void set_has_n_total_critical_errors();
  inline void clear_has_n_total_critical_errors();
  inline void set_has_last_error();
  inline void clear_has_last_error();
  inline void set_has_t_ms_last_critical_error();
  inline void clear_has_t_ms_last_critical_error();
  inline void set_has_t_ms_last_error();
  inline void clear_has_t_ms_last_error();
  inline void set_has_t_ms_last_valid_packet();
  inline void clear_has_t_ms_last_valid_packet();
  inline void set_has_t_ms_last_sensor_control();
  inline void clear_has_t_ms_last_sensor_control();
  inline void set_has_t_ms_last_obj_control();
  inline void clear_has_t_ms_last_obj_control();
  inline void set_has_t_ms_last_obj_data();
  inline void clear_has_t_ms_last_obj_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 n_total_packets_;
  ::google::protobuf::int64 n_total_errors_;
  ::google::protobuf::int64 n_total_critical_errors_;
  ::google::protobuf::int64 t_ms_last_critical_error_;
  ::google::protobuf::int64 t_ms_last_error_;
  ::google::protobuf::int64 t_ms_last_valid_packet_;
  ::google::protobuf::int64 t_ms_last_sensor_control_;
  ::google::protobuf::int64 t_ms_last_obj_control_;
  ::google::protobuf::int64 t_ms_last_obj_data_;
  ::google::protobuf::int32 last_error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SMSStatus* default_instance_;
};
// -------------------------------------------------------------------

class SignalPhase_PhaseStatus : public ::google::protobuf::Message {
 public:
  SignalPhase_PhaseStatus();
  virtual ~SignalPhase_PhaseStatus();
  
  SignalPhase_PhaseStatus(const SignalPhase_PhaseStatus& from);
  
  inline SignalPhase_PhaseStatus& operator=(const SignalPhase_PhaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalPhase_PhaseStatus& default_instance();
  
  void Swap(SignalPhase_PhaseStatus* other);
  
  // implements Message ----------------------------------------------
  
  SignalPhase_PhaseStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalPhase_PhaseStatus& from);
  void MergeFrom(const SignalPhase_PhaseStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 phase_id = 1;
  inline bool has_phase_id() const;
  inline void clear_phase_id();
  static const int kPhaseIdFieldNumber = 1;
  inline ::google::protobuf::int32 phase_id() const;
  inline void set_phase_id(::google::protobuf::int32 value);
  
  // required .common_sensors.SignalPhase.PhaseColor color = 2 [default = COLOR_UNKNOWN];
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::common_sensors::SignalPhase_PhaseColor color() const;
  inline void set_color(::common_sensors::SignalPhase_PhaseColor value);
  
  // @@protoc_insertion_point(class_scope:common_sensors.SignalPhase.PhaseStatus)
 private:
  inline void set_has_phase_id();
  inline void clear_has_phase_id();
  inline void set_has_color();
  inline void clear_has_color();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 phase_id_;
  int color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SignalPhase_PhaseStatus* default_instance_;
};
// -------------------------------------------------------------------

class SignalPhase : public ::google::protobuf::Message {
 public:
  SignalPhase();
  virtual ~SignalPhase();
  
  SignalPhase(const SignalPhase& from);
  
  inline SignalPhase& operator=(const SignalPhase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalPhase& default_instance();
  
  void Swap(SignalPhase* other);
  
  // implements Message ----------------------------------------------
  
  SignalPhase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalPhase& from);
  void MergeFrom(const SignalPhase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SignalPhase_PhaseStatus PhaseStatus;
  
  typedef SignalPhase_InterStatus InterStatus;
  static const InterStatus UNKNOWN = SignalPhase_InterStatus_UNKNOWN;
  static const InterStatus FLASHING = SignalPhase_InterStatus_FLASHING;
  static const InterStatus NORMAL = SignalPhase_InterStatus_NORMAL;
  static inline bool InterStatus_IsValid(int value) {
    return SignalPhase_InterStatus_IsValid(value);
  }
  static const InterStatus InterStatus_MIN =
    SignalPhase_InterStatus_InterStatus_MIN;
  static const InterStatus InterStatus_MAX =
    SignalPhase_InterStatus_InterStatus_MAX;
  static const int InterStatus_ARRAYSIZE =
    SignalPhase_InterStatus_InterStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  InterStatus_descriptor() {
    return SignalPhase_InterStatus_descriptor();
  }
  static inline const ::std::string& InterStatus_Name(InterStatus value) {
    return SignalPhase_InterStatus_Name(value);
  }
  static inline bool InterStatus_Parse(const ::std::string& name,
      InterStatus* value) {
    return SignalPhase_InterStatus_Parse(name, value);
  }
  
  typedef SignalPhase_PhaseColor PhaseColor;
  static const PhaseColor GREEN = SignalPhase_PhaseColor_GREEN;
  static const PhaseColor YELLOW = SignalPhase_PhaseColor_YELLOW;
  static const PhaseColor RED = SignalPhase_PhaseColor_RED;
  static const PhaseColor COLOR_UNKNOWN = SignalPhase_PhaseColor_COLOR_UNKNOWN;
  static inline bool PhaseColor_IsValid(int value) {
    return SignalPhase_PhaseColor_IsValid(value);
  }
  static const PhaseColor PhaseColor_MIN =
    SignalPhase_PhaseColor_PhaseColor_MIN;
  static const PhaseColor PhaseColor_MAX =
    SignalPhase_PhaseColor_PhaseColor_MAX;
  static const int PhaseColor_ARRAYSIZE =
    SignalPhase_PhaseColor_PhaseColor_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PhaseColor_descriptor() {
    return SignalPhase_PhaseColor_descriptor();
  }
  static inline const ::std::string& PhaseColor_Name(PhaseColor value) {
    return SignalPhase_PhaseColor_Name(value);
  }
  static inline bool PhaseColor_Parse(const ::std::string& name,
      PhaseColor* value) {
    return SignalPhase_PhaseColor_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required int64 t_ms_rcv_epoch = 1;
  inline bool has_t_ms_rcv_epoch() const;
  inline void clear_t_ms_rcv_epoch();
  static const int kTMsRcvEpochFieldNumber = 1;
  inline ::google::protobuf::int64 t_ms_rcv_epoch() const;
  inline void set_t_ms_rcv_epoch(::google::protobuf::int64 value);
  
  // required .common_sensors.SignalPhase.InterStatus status = 2 [default = UNKNOWN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::common_sensors::SignalPhase_InterStatus status() const;
  inline void set_status(::common_sensors::SignalPhase_InterStatus value);
  
  // repeated .common_sensors.SignalPhase.PhaseStatus phase_status = 3;
  inline int phase_status_size() const;
  inline void clear_phase_status();
  static const int kPhaseStatusFieldNumber = 3;
  inline const ::common_sensors::SignalPhase_PhaseStatus& phase_status(int index) const;
  inline ::common_sensors::SignalPhase_PhaseStatus* mutable_phase_status(int index);
  inline ::common_sensors::SignalPhase_PhaseStatus* add_phase_status();
  inline const ::google::protobuf::RepeatedPtrField< ::common_sensors::SignalPhase_PhaseStatus >&
      phase_status() const;
  inline ::google::protobuf::RepeatedPtrField< ::common_sensors::SignalPhase_PhaseStatus >*
      mutable_phase_status();
  
  // @@protoc_insertion_point(class_scope:common_sensors.SignalPhase)
 private:
  inline void set_has_t_ms_rcv_epoch();
  inline void clear_has_t_ms_rcv_epoch();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 t_ms_rcv_epoch_;
  ::google::protobuf::RepeatedPtrField< ::common_sensors::SignalPhase_PhaseStatus > phase_status_;
  int status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SignalPhase* default_instance_;
};
// -------------------------------------------------------------------

class ECLCommStatus : public ::google::protobuf::Message {
 public:
  ECLCommStatus();
  virtual ~ECLCommStatus();
  
  ECLCommStatus(const ECLCommStatus& from);
  
  inline ECLCommStatus& operator=(const ECLCommStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ECLCommStatus& default_instance();
  
  void Swap(ECLCommStatus* other);
  
  // implements Message ----------------------------------------------
  
  ECLCommStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ECLCommStatus& from);
  void MergeFrom(const ECLCommStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ECLCommStatus_CommStatus CommStatus;
  static const CommStatus OK = ECLCommStatus_CommStatus_OK;
  static const CommStatus UDP_BIND_ERROR = ECLCommStatus_CommStatus_UDP_BIND_ERROR;
  static const CommStatus UDP_OTHER_ERROR = ECLCommStatus_CommStatus_UDP_OTHER_ERROR;
  static const CommStatus ERROR_OUTDATED = ECLCommStatus_CommStatus_ERROR_OUTDATED;
  static const CommStatus ERROR_PACKET_FORMAT = ECLCommStatus_CommStatus_ERROR_PACKET_FORMAT;
  static const CommStatus UNKNOWN_ERROR = ECLCommStatus_CommStatus_UNKNOWN_ERROR;
  static inline bool CommStatus_IsValid(int value) {
    return ECLCommStatus_CommStatus_IsValid(value);
  }
  static const CommStatus CommStatus_MIN =
    ECLCommStatus_CommStatus_CommStatus_MIN;
  static const CommStatus CommStatus_MAX =
    ECLCommStatus_CommStatus_CommStatus_MAX;
  static const int CommStatus_ARRAYSIZE =
    ECLCommStatus_CommStatus_CommStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommStatus_descriptor() {
    return ECLCommStatus_CommStatus_descriptor();
  }
  static inline const ::std::string& CommStatus_Name(CommStatus value) {
    return ECLCommStatus_CommStatus_Name(value);
  }
  static inline bool CommStatus_Parse(const ::std::string& name,
      CommStatus* value) {
    return ECLCommStatus_CommStatus_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .common_sensors.ECLCommStatus.CommStatus last_error_status = 1 [default = OK];
  inline bool has_last_error_status() const;
  inline void clear_last_error_status();
  static const int kLastErrorStatusFieldNumber = 1;
  inline ::common_sensors::ECLCommStatus_CommStatus last_error_status() const;
  inline void set_last_error_status(::common_sensors::ECLCommStatus_CommStatus value);
  
  // optional int64 t_ms_last_update = 2;
  inline bool has_t_ms_last_update() const;
  inline void clear_t_ms_last_update();
  static const int kTMsLastUpdateFieldNumber = 2;
  inline ::google::protobuf::int64 t_ms_last_update() const;
  inline void set_t_ms_last_update(::google::protobuf::int64 value);
  
  // optional int64 t_ms_last_error = 3;
  inline bool has_t_ms_last_error() const;
  inline void clear_t_ms_last_error();
  static const int kTMsLastErrorFieldNumber = 3;
  inline ::google::protobuf::int64 t_ms_last_error() const;
  inline void set_t_ms_last_error(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:common_sensors.ECLCommStatus)
 private:
  inline void set_has_last_error_status();
  inline void clear_has_last_error_status();
  inline void set_has_t_ms_last_update();
  inline void clear_has_t_ms_last_update();
  inline void set_has_t_ms_last_error();
  inline void clear_has_t_ms_last_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 t_ms_last_update_;
  ::google::protobuf::int64 t_ms_last_error_;
  int last_error_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static ECLCommStatus* default_instance_;
};
// -------------------------------------------------------------------

class SMSSPaT : public ::google::protobuf::Message {
 public:
  SMSSPaT();
  virtual ~SMSSPaT();
  
  SMSSPaT(const SMSSPaT& from);
  
  inline SMSSPaT& operator=(const SMSSPaT& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SMSSPaT& default_instance();
  
  void Swap(SMSSPaT* other);
  
  // implements Message ----------------------------------------------
  
  SMSSPaT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SMSSPaT& from);
  void MergeFrom(const SMSSPaT& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 intersection_id = 1;
  inline bool has_intersection_id() const;
  inline void clear_intersection_id();
  static const int kIntersectionIdFieldNumber = 1;
  inline ::google::protobuf::int32 intersection_id() const;
  inline void set_intersection_id(::google::protobuf::int32 value);
  
  // required int64 t_ms_rcv_epoch = 2;
  inline bool has_t_ms_rcv_epoch() const;
  inline void clear_t_ms_rcv_epoch();
  static const int kTMsRcvEpochFieldNumber = 2;
  inline ::google::protobuf::int64 t_ms_rcv_epoch() const;
  inline void set_t_ms_rcv_epoch(::google::protobuf::int64 value);
  
  // optional .common_sensors.SignalPhase signal_phase = 3;
  inline bool has_signal_phase() const;
  inline void clear_signal_phase();
  static const int kSignalPhaseFieldNumber = 3;
  inline const ::common_sensors::SignalPhase& signal_phase() const;
  inline ::common_sensors::SignalPhase* mutable_signal_phase();
  inline ::common_sensors::SignalPhase* release_signal_phase();
  
  // optional .common_sensors.ECLCommStatus ecl_status = 4;
  inline bool has_ecl_status() const;
  inline void clear_ecl_status();
  static const int kEclStatusFieldNumber = 4;
  inline const ::common_sensors::ECLCommStatus& ecl_status() const;
  inline ::common_sensors::ECLCommStatus* mutable_ecl_status();
  inline ::common_sensors::ECLCommStatus* release_ecl_status();
  
  // optional .common_sensors.SMSPackage sms_package = 5;
  inline bool has_sms_package() const;
  inline void clear_sms_package();
  static const int kSmsPackageFieldNumber = 5;
  inline const ::common_sensors::SMSPackage& sms_package() const;
  inline ::common_sensors::SMSPackage* mutable_sms_package();
  inline ::common_sensors::SMSPackage* release_sms_package();
  
  // optional .common_sensors.SMSStatus sms_status = 6;
  inline bool has_sms_status() const;
  inline void clear_sms_status();
  static const int kSmsStatusFieldNumber = 6;
  inline const ::common_sensors::SMSStatus& sms_status() const;
  inline ::common_sensors::SMSStatus* mutable_sms_status();
  inline ::common_sensors::SMSStatus* release_sms_status();
  
  // @@protoc_insertion_point(class_scope:common_sensors.SMSSPaT)
 private:
  inline void set_has_intersection_id();
  inline void clear_has_intersection_id();
  inline void set_has_t_ms_rcv_epoch();
  inline void clear_has_t_ms_rcv_epoch();
  inline void set_has_signal_phase();
  inline void clear_has_signal_phase();
  inline void set_has_ecl_status();
  inline void clear_has_ecl_status();
  inline void set_has_sms_package();
  inline void clear_has_sms_package();
  inline void set_has_sms_status();
  inline void clear_has_sms_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 t_ms_rcv_epoch_;
  ::common_sensors::SignalPhase* signal_phase_;
  ::common_sensors::ECLCommStatus* ecl_status_;
  ::common_sensors::SMSPackage* sms_package_;
  ::common_sensors::SMSStatus* sms_status_;
  ::google::protobuf::int32 intersection_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_sms_2dSPaT_2eproto();
  friend void protobuf_AssignDesc_sms_2dSPaT_2eproto();
  friend void protobuf_ShutdownFile_sms_2dSPaT_2eproto();
  
  void InitAsDefaultInstance();
  static SMSSPaT* default_instance_;
};
// ===================================================================


// ===================================================================

// SMSPackage_SensorStatus

// required int32 source_device = 1;
inline bool SMSPackage_SensorStatus::has_source_device() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMSPackage_SensorStatus::set_has_source_device() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMSPackage_SensorStatus::clear_has_source_device() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMSPackage_SensorStatus::clear_source_device() {
  source_device_ = 0;
  clear_has_source_device();
}
inline ::google::protobuf::int32 SMSPackage_SensorStatus::source_device() const {
  return source_device_;
}
inline void SMSPackage_SensorStatus::set_source_device(::google::protobuf::int32 value) {
  set_has_source_device();
  source_device_ = value;
}

// required int32 can_status = 2 [default = 0];
inline bool SMSPackage_SensorStatus::has_can_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMSPackage_SensorStatus::set_has_can_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMSPackage_SensorStatus::clear_has_can_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMSPackage_SensorStatus::clear_can_status() {
  can_status_ = 0;
  clear_has_can_status();
}
inline ::google::protobuf::int32 SMSPackage_SensorStatus::can_status() const {
  return can_status_;
}
inline void SMSPackage_SensorStatus::set_can_status(::google::protobuf::int32 value) {
  set_has_can_status();
  can_status_ = value;
}

// required int32 sensorpresent = 3;
inline bool SMSPackage_SensorStatus::has_sensorpresent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMSPackage_SensorStatus::set_has_sensorpresent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMSPackage_SensorStatus::clear_has_sensorpresent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMSPackage_SensorStatus::clear_sensorpresent() {
  sensorpresent_ = 0;
  clear_has_sensorpresent();
}
inline ::google::protobuf::int32 SMSPackage_SensorStatus::sensorpresent() const {
  return sensorpresent_;
}
inline void SMSPackage_SensorStatus::set_sensorpresent(::google::protobuf::int32 value) {
  set_has_sensorpresent();
  sensorpresent_ = value;
}

// required .common_sensors.SMSPackage.SensorStatus.EthernetStatus ethernet_status = 4 [default = UNKNOWN_ERROR];
inline bool SMSPackage_SensorStatus::has_ethernet_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMSPackage_SensorStatus::set_has_ethernet_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMSPackage_SensorStatus::clear_has_ethernet_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMSPackage_SensorStatus::clear_ethernet_status() {
  ethernet_status_ = 6;
  clear_has_ethernet_status();
}
inline ::common_sensors::SMSPackage_SensorStatus_EthernetStatus SMSPackage_SensorStatus::ethernet_status() const {
  return static_cast< ::common_sensors::SMSPackage_SensorStatus_EthernetStatus >(ethernet_status_);
}
inline void SMSPackage_SensorStatus::set_ethernet_status(::common_sensors::SMSPackage_SensorStatus_EthernetStatus value) {
  GOOGLE_DCHECK(::common_sensors::SMSPackage_SensorStatus_EthernetStatus_IsValid(value));
  set_has_ethernet_status();
  ethernet_status_ = value;
}

// required int32 sensor_timestamp = 5;
inline bool SMSPackage_SensorStatus::has_sensor_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMSPackage_SensorStatus::set_has_sensor_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMSPackage_SensorStatus::clear_has_sensor_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMSPackage_SensorStatus::clear_sensor_timestamp() {
  sensor_timestamp_ = 0;
  clear_has_sensor_timestamp();
}
inline ::google::protobuf::int32 SMSPackage_SensorStatus::sensor_timestamp() const {
  return sensor_timestamp_;
}
inline void SMSPackage_SensorStatus::set_sensor_timestamp(::google::protobuf::int32 value) {
  set_has_sensor_timestamp();
  sensor_timestamp_ = value;
}

// -------------------------------------------------------------------

// SMSPackage_ObjData

// required int32 obj_id = 1;
inline bool SMSPackage_ObjData::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMSPackage_ObjData::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMSPackage_ObjData::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMSPackage_ObjData::clear_obj_id() {
  obj_id_ = 0;
  clear_has_obj_id();
}
inline ::google::protobuf::int32 SMSPackage_ObjData::obj_id() const {
  return obj_id_;
}
inline void SMSPackage_ObjData::set_obj_id(::google::protobuf::int32 value) {
  set_has_obj_id();
  obj_id_ = value;
}

// required double x = 2;
inline bool SMSPackage_ObjData::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMSPackage_ObjData::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMSPackage_ObjData::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMSPackage_ObjData::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double SMSPackage_ObjData::x() const {
  return x_;
}
inline void SMSPackage_ObjData::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 3;
inline bool SMSPackage_ObjData::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMSPackage_ObjData::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMSPackage_ObjData::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMSPackage_ObjData::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double SMSPackage_ObjData::y() const {
  return y_;
}
inline void SMSPackage_ObjData::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double vx = 4 [default = 0];
inline bool SMSPackage_ObjData::has_vx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMSPackage_ObjData::set_has_vx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMSPackage_ObjData::clear_has_vx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMSPackage_ObjData::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline double SMSPackage_ObjData::vx() const {
  return vx_;
}
inline void SMSPackage_ObjData::set_vx(double value) {
  set_has_vx();
  vx_ = value;
}

// required double vy = 5 [default = 0];
inline bool SMSPackage_ObjData::has_vy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMSPackage_ObjData::set_has_vy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMSPackage_ObjData::clear_has_vy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMSPackage_ObjData::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline double SMSPackage_ObjData::vy() const {
  return vy_;
}
inline void SMSPackage_ObjData::set_vy(double value) {
  set_has_vy();
  vy_ = value;
}

// required double length_obj = 6 [default = 0];
inline bool SMSPackage_ObjData::has_length_obj() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SMSPackage_ObjData::set_has_length_obj() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SMSPackage_ObjData::clear_has_length_obj() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SMSPackage_ObjData::clear_length_obj() {
  length_obj_ = 0;
  clear_has_length_obj();
}
inline double SMSPackage_ObjData::length_obj() const {
  return length_obj_;
}
inline void SMSPackage_ObjData::set_length_obj(double value) {
  set_has_length_obj();
  length_obj_ = value;
}

// -------------------------------------------------------------------

// SMSPackage

// required int64 t_ms_rcv_epoch = 1;
inline bool SMSPackage::has_t_ms_rcv_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMSPackage::set_has_t_ms_rcv_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMSPackage::clear_has_t_ms_rcv_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMSPackage::clear_t_ms_rcv_epoch() {
  t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_rcv_epoch();
}
inline ::google::protobuf::int64 SMSPackage::t_ms_rcv_epoch() const {
  return t_ms_rcv_epoch_;
}
inline void SMSPackage::set_t_ms_rcv_epoch(::google::protobuf::int64 value) {
  set_has_t_ms_rcv_epoch();
  t_ms_rcv_epoch_ = value;
}

// required int32 nobjs = 2;
inline bool SMSPackage::has_nobjs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMSPackage::set_has_nobjs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMSPackage::clear_has_nobjs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMSPackage::clear_nobjs() {
  nobjs_ = 0;
  clear_has_nobjs();
}
inline ::google::protobuf::int32 SMSPackage::nobjs() const {
  return nobjs_;
}
inline void SMSPackage::set_nobjs(::google::protobuf::int32 value) {
  set_has_nobjs();
  nobjs_ = value;
}

// required .common_sensors.SMSPackage.SimuMode mode = 3 [default = NORMAL];
inline bool SMSPackage::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMSPackage::set_has_mode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMSPackage::clear_has_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMSPackage::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::common_sensors::SMSPackage_SimuMode SMSPackage::mode() const {
  return static_cast< ::common_sensors::SMSPackage_SimuMode >(mode_);
}
inline void SMSPackage::set_mode(::common_sensors::SMSPackage_SimuMode value) {
  GOOGLE_DCHECK(::common_sensors::SMSPackage_SimuMode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// required int32 ncyclecnt = 4;
inline bool SMSPackage::has_ncyclecnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMSPackage::set_has_ncyclecnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMSPackage::clear_has_ncyclecnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMSPackage::clear_ncyclecnt() {
  ncyclecnt_ = 0;
  clear_has_ncyclecnt();
}
inline ::google::protobuf::int32 SMSPackage::ncyclecnt() const {
  return ncyclecnt_;
}
inline void SMSPackage::set_ncyclecnt(::google::protobuf::int32 value) {
  set_has_ncyclecnt();
  ncyclecnt_ = value;
}

// required int32 ntscanms = 5;
inline bool SMSPackage::has_ntscanms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMSPackage::set_has_ntscanms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMSPackage::clear_has_ntscanms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMSPackage::clear_ntscanms() {
  ntscanms_ = 0;
  clear_has_ntscanms();
}
inline ::google::protobuf::int32 SMSPackage::ntscanms() const {
  return ntscanms_;
}
inline void SMSPackage::set_ntscanms(::google::protobuf::int32 value) {
  set_has_ntscanms();
  ntscanms_ = value;
}

// optional .common_sensors.SMSPackage.SensorStatus sensor_status = 6;
inline bool SMSPackage::has_sensor_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SMSPackage::set_has_sensor_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SMSPackage::clear_has_sensor_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SMSPackage::clear_sensor_status() {
  if (sensor_status_ != NULL) sensor_status_->::common_sensors::SMSPackage_SensorStatus::Clear();
  clear_has_sensor_status();
}
inline const ::common_sensors::SMSPackage_SensorStatus& SMSPackage::sensor_status() const {
  return sensor_status_ != NULL ? *sensor_status_ : *default_instance_->sensor_status_;
}
inline ::common_sensors::SMSPackage_SensorStatus* SMSPackage::mutable_sensor_status() {
  set_has_sensor_status();
  if (sensor_status_ == NULL) sensor_status_ = new ::common_sensors::SMSPackage_SensorStatus;
  return sensor_status_;
}
inline ::common_sensors::SMSPackage_SensorStatus* SMSPackage::release_sensor_status() {
  clear_has_sensor_status();
  ::common_sensors::SMSPackage_SensorStatus* temp = sensor_status_;
  sensor_status_ = NULL;
  return temp;
}

// repeated .common_sensors.SMSPackage.ObjData obj_data = 7;
inline int SMSPackage::obj_data_size() const {
  return obj_data_.size();
}
inline void SMSPackage::clear_obj_data() {
  obj_data_.Clear();
}
inline const ::common_sensors::SMSPackage_ObjData& SMSPackage::obj_data(int index) const {
  return obj_data_.Get(index);
}
inline ::common_sensors::SMSPackage_ObjData* SMSPackage::mutable_obj_data(int index) {
  return obj_data_.Mutable(index);
}
inline ::common_sensors::SMSPackage_ObjData* SMSPackage::add_obj_data() {
  return obj_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common_sensors::SMSPackage_ObjData >&
SMSPackage::obj_data() const {
  return obj_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::common_sensors::SMSPackage_ObjData >*
SMSPackage::mutable_obj_data() {
  return &obj_data_;
}

// -------------------------------------------------------------------

// SMSStatus

// required int64 n_total_packets = 1;
inline bool SMSStatus::has_n_total_packets() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMSStatus::set_has_n_total_packets() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMSStatus::clear_has_n_total_packets() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMSStatus::clear_n_total_packets() {
  n_total_packets_ = GOOGLE_LONGLONG(0);
  clear_has_n_total_packets();
}
inline ::google::protobuf::int64 SMSStatus::n_total_packets() const {
  return n_total_packets_;
}
inline void SMSStatus::set_n_total_packets(::google::protobuf::int64 value) {
  set_has_n_total_packets();
  n_total_packets_ = value;
}

// required int64 n_total_errors = 2;
inline bool SMSStatus::has_n_total_errors() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMSStatus::set_has_n_total_errors() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMSStatus::clear_has_n_total_errors() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMSStatus::clear_n_total_errors() {
  n_total_errors_ = GOOGLE_LONGLONG(0);
  clear_has_n_total_errors();
}
inline ::google::protobuf::int64 SMSStatus::n_total_errors() const {
  return n_total_errors_;
}
inline void SMSStatus::set_n_total_errors(::google::protobuf::int64 value) {
  set_has_n_total_errors();
  n_total_errors_ = value;
}

// required int64 n_total_critical_errors = 3;
inline bool SMSStatus::has_n_total_critical_errors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMSStatus::set_has_n_total_critical_errors() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMSStatus::clear_has_n_total_critical_errors() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMSStatus::clear_n_total_critical_errors() {
  n_total_critical_errors_ = GOOGLE_LONGLONG(0);
  clear_has_n_total_critical_errors();
}
inline ::google::protobuf::int64 SMSStatus::n_total_critical_errors() const {
  return n_total_critical_errors_;
}
inline void SMSStatus::set_n_total_critical_errors(::google::protobuf::int64 value) {
  set_has_n_total_critical_errors();
  n_total_critical_errors_ = value;
}

// required int32 last_error = 4;
inline bool SMSStatus::has_last_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMSStatus::set_has_last_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMSStatus::clear_has_last_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMSStatus::clear_last_error() {
  last_error_ = 0;
  clear_has_last_error();
}
inline ::google::protobuf::int32 SMSStatus::last_error() const {
  return last_error_;
}
inline void SMSStatus::set_last_error(::google::protobuf::int32 value) {
  set_has_last_error();
  last_error_ = value;
}

// required int64 t_ms_last_critical_error = 5;
inline bool SMSStatus::has_t_ms_last_critical_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMSStatus::set_has_t_ms_last_critical_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMSStatus::clear_has_t_ms_last_critical_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMSStatus::clear_t_ms_last_critical_error() {
  t_ms_last_critical_error_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_critical_error();
}
inline ::google::protobuf::int64 SMSStatus::t_ms_last_critical_error() const {
  return t_ms_last_critical_error_;
}
inline void SMSStatus::set_t_ms_last_critical_error(::google::protobuf::int64 value) {
  set_has_t_ms_last_critical_error();
  t_ms_last_critical_error_ = value;
}

// required int64 t_ms_last_error = 6;
inline bool SMSStatus::has_t_ms_last_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SMSStatus::set_has_t_ms_last_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SMSStatus::clear_has_t_ms_last_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SMSStatus::clear_t_ms_last_error() {
  t_ms_last_error_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_error();
}
inline ::google::protobuf::int64 SMSStatus::t_ms_last_error() const {
  return t_ms_last_error_;
}
inline void SMSStatus::set_t_ms_last_error(::google::protobuf::int64 value) {
  set_has_t_ms_last_error();
  t_ms_last_error_ = value;
}

// required int64 t_ms_last_valid_packet = 7;
inline bool SMSStatus::has_t_ms_last_valid_packet() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SMSStatus::set_has_t_ms_last_valid_packet() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SMSStatus::clear_has_t_ms_last_valid_packet() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SMSStatus::clear_t_ms_last_valid_packet() {
  t_ms_last_valid_packet_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_valid_packet();
}
inline ::google::protobuf::int64 SMSStatus::t_ms_last_valid_packet() const {
  return t_ms_last_valid_packet_;
}
inline void SMSStatus::set_t_ms_last_valid_packet(::google::protobuf::int64 value) {
  set_has_t_ms_last_valid_packet();
  t_ms_last_valid_packet_ = value;
}

// optional int64 t_ms_last_sensor_control = 8;
inline bool SMSStatus::has_t_ms_last_sensor_control() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SMSStatus::set_has_t_ms_last_sensor_control() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SMSStatus::clear_has_t_ms_last_sensor_control() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SMSStatus::clear_t_ms_last_sensor_control() {
  t_ms_last_sensor_control_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_sensor_control();
}
inline ::google::protobuf::int64 SMSStatus::t_ms_last_sensor_control() const {
  return t_ms_last_sensor_control_;
}
inline void SMSStatus::set_t_ms_last_sensor_control(::google::protobuf::int64 value) {
  set_has_t_ms_last_sensor_control();
  t_ms_last_sensor_control_ = value;
}

// optional int64 t_ms_last_obj_control = 9;
inline bool SMSStatus::has_t_ms_last_obj_control() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SMSStatus::set_has_t_ms_last_obj_control() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SMSStatus::clear_has_t_ms_last_obj_control() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SMSStatus::clear_t_ms_last_obj_control() {
  t_ms_last_obj_control_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_obj_control();
}
inline ::google::protobuf::int64 SMSStatus::t_ms_last_obj_control() const {
  return t_ms_last_obj_control_;
}
inline void SMSStatus::set_t_ms_last_obj_control(::google::protobuf::int64 value) {
  set_has_t_ms_last_obj_control();
  t_ms_last_obj_control_ = value;
}

// optional int64 t_ms_last_obj_data = 10;
inline bool SMSStatus::has_t_ms_last_obj_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SMSStatus::set_has_t_ms_last_obj_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SMSStatus::clear_has_t_ms_last_obj_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SMSStatus::clear_t_ms_last_obj_data() {
  t_ms_last_obj_data_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_obj_data();
}
inline ::google::protobuf::int64 SMSStatus::t_ms_last_obj_data() const {
  return t_ms_last_obj_data_;
}
inline void SMSStatus::set_t_ms_last_obj_data(::google::protobuf::int64 value) {
  set_has_t_ms_last_obj_data();
  t_ms_last_obj_data_ = value;
}

// -------------------------------------------------------------------

// SignalPhase_PhaseStatus

// required int32 phase_id = 1;
inline bool SignalPhase_PhaseStatus::has_phase_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalPhase_PhaseStatus::set_has_phase_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalPhase_PhaseStatus::clear_has_phase_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalPhase_PhaseStatus::clear_phase_id() {
  phase_id_ = 0;
  clear_has_phase_id();
}
inline ::google::protobuf::int32 SignalPhase_PhaseStatus::phase_id() const {
  return phase_id_;
}
inline void SignalPhase_PhaseStatus::set_phase_id(::google::protobuf::int32 value) {
  set_has_phase_id();
  phase_id_ = value;
}

// required .common_sensors.SignalPhase.PhaseColor color = 2 [default = COLOR_UNKNOWN];
inline bool SignalPhase_PhaseStatus::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalPhase_PhaseStatus::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalPhase_PhaseStatus::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalPhase_PhaseStatus::clear_color() {
  color_ = 4;
  clear_has_color();
}
inline ::common_sensors::SignalPhase_PhaseColor SignalPhase_PhaseStatus::color() const {
  return static_cast< ::common_sensors::SignalPhase_PhaseColor >(color_);
}
inline void SignalPhase_PhaseStatus::set_color(::common_sensors::SignalPhase_PhaseColor value) {
  GOOGLE_DCHECK(::common_sensors::SignalPhase_PhaseColor_IsValid(value));
  set_has_color();
  color_ = value;
}

// -------------------------------------------------------------------

// SignalPhase

// required int64 t_ms_rcv_epoch = 1;
inline bool SignalPhase::has_t_ms_rcv_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalPhase::set_has_t_ms_rcv_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalPhase::clear_has_t_ms_rcv_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalPhase::clear_t_ms_rcv_epoch() {
  t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_rcv_epoch();
}
inline ::google::protobuf::int64 SignalPhase::t_ms_rcv_epoch() const {
  return t_ms_rcv_epoch_;
}
inline void SignalPhase::set_t_ms_rcv_epoch(::google::protobuf::int64 value) {
  set_has_t_ms_rcv_epoch();
  t_ms_rcv_epoch_ = value;
}

// required .common_sensors.SignalPhase.InterStatus status = 2 [default = UNKNOWN];
inline bool SignalPhase::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalPhase::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalPhase::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalPhase::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::common_sensors::SignalPhase_InterStatus SignalPhase::status() const {
  return static_cast< ::common_sensors::SignalPhase_InterStatus >(status_);
}
inline void SignalPhase::set_status(::common_sensors::SignalPhase_InterStatus value) {
  GOOGLE_DCHECK(::common_sensors::SignalPhase_InterStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// repeated .common_sensors.SignalPhase.PhaseStatus phase_status = 3;
inline int SignalPhase::phase_status_size() const {
  return phase_status_.size();
}
inline void SignalPhase::clear_phase_status() {
  phase_status_.Clear();
}
inline const ::common_sensors::SignalPhase_PhaseStatus& SignalPhase::phase_status(int index) const {
  return phase_status_.Get(index);
}
inline ::common_sensors::SignalPhase_PhaseStatus* SignalPhase::mutable_phase_status(int index) {
  return phase_status_.Mutable(index);
}
inline ::common_sensors::SignalPhase_PhaseStatus* SignalPhase::add_phase_status() {
  return phase_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::common_sensors::SignalPhase_PhaseStatus >&
SignalPhase::phase_status() const {
  return phase_status_;
}
inline ::google::protobuf::RepeatedPtrField< ::common_sensors::SignalPhase_PhaseStatus >*
SignalPhase::mutable_phase_status() {
  return &phase_status_;
}

// -------------------------------------------------------------------

// ECLCommStatus

// optional .common_sensors.ECLCommStatus.CommStatus last_error_status = 1 [default = OK];
inline bool ECLCommStatus::has_last_error_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ECLCommStatus::set_has_last_error_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ECLCommStatus::clear_has_last_error_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ECLCommStatus::clear_last_error_status() {
  last_error_status_ = 0;
  clear_has_last_error_status();
}
inline ::common_sensors::ECLCommStatus_CommStatus ECLCommStatus::last_error_status() const {
  return static_cast< ::common_sensors::ECLCommStatus_CommStatus >(last_error_status_);
}
inline void ECLCommStatus::set_last_error_status(::common_sensors::ECLCommStatus_CommStatus value) {
  GOOGLE_DCHECK(::common_sensors::ECLCommStatus_CommStatus_IsValid(value));
  set_has_last_error_status();
  last_error_status_ = value;
}

// optional int64 t_ms_last_update = 2;
inline bool ECLCommStatus::has_t_ms_last_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ECLCommStatus::set_has_t_ms_last_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ECLCommStatus::clear_has_t_ms_last_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ECLCommStatus::clear_t_ms_last_update() {
  t_ms_last_update_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_update();
}
inline ::google::protobuf::int64 ECLCommStatus::t_ms_last_update() const {
  return t_ms_last_update_;
}
inline void ECLCommStatus::set_t_ms_last_update(::google::protobuf::int64 value) {
  set_has_t_ms_last_update();
  t_ms_last_update_ = value;
}

// optional int64 t_ms_last_error = 3;
inline bool ECLCommStatus::has_t_ms_last_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ECLCommStatus::set_has_t_ms_last_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ECLCommStatus::clear_has_t_ms_last_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ECLCommStatus::clear_t_ms_last_error() {
  t_ms_last_error_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_last_error();
}
inline ::google::protobuf::int64 ECLCommStatus::t_ms_last_error() const {
  return t_ms_last_error_;
}
inline void ECLCommStatus::set_t_ms_last_error(::google::protobuf::int64 value) {
  set_has_t_ms_last_error();
  t_ms_last_error_ = value;
}

// -------------------------------------------------------------------

// SMSSPaT

// required int32 intersection_id = 1;
inline bool SMSSPaT::has_intersection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMSSPaT::set_has_intersection_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMSSPaT::clear_has_intersection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMSSPaT::clear_intersection_id() {
  intersection_id_ = 0;
  clear_has_intersection_id();
}
inline ::google::protobuf::int32 SMSSPaT::intersection_id() const {
  return intersection_id_;
}
inline void SMSSPaT::set_intersection_id(::google::protobuf::int32 value) {
  set_has_intersection_id();
  intersection_id_ = value;
}

// required int64 t_ms_rcv_epoch = 2;
inline bool SMSSPaT::has_t_ms_rcv_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMSSPaT::set_has_t_ms_rcv_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMSSPaT::clear_has_t_ms_rcv_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMSSPaT::clear_t_ms_rcv_epoch() {
  t_ms_rcv_epoch_ = GOOGLE_LONGLONG(0);
  clear_has_t_ms_rcv_epoch();
}
inline ::google::protobuf::int64 SMSSPaT::t_ms_rcv_epoch() const {
  return t_ms_rcv_epoch_;
}
inline void SMSSPaT::set_t_ms_rcv_epoch(::google::protobuf::int64 value) {
  set_has_t_ms_rcv_epoch();
  t_ms_rcv_epoch_ = value;
}

// optional .common_sensors.SignalPhase signal_phase = 3;
inline bool SMSSPaT::has_signal_phase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMSSPaT::set_has_signal_phase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMSSPaT::clear_has_signal_phase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMSSPaT::clear_signal_phase() {
  if (signal_phase_ != NULL) signal_phase_->::common_sensors::SignalPhase::Clear();
  clear_has_signal_phase();
}
inline const ::common_sensors::SignalPhase& SMSSPaT::signal_phase() const {
  return signal_phase_ != NULL ? *signal_phase_ : *default_instance_->signal_phase_;
}
inline ::common_sensors::SignalPhase* SMSSPaT::mutable_signal_phase() {
  set_has_signal_phase();
  if (signal_phase_ == NULL) signal_phase_ = new ::common_sensors::SignalPhase;
  return signal_phase_;
}
inline ::common_sensors::SignalPhase* SMSSPaT::release_signal_phase() {
  clear_has_signal_phase();
  ::common_sensors::SignalPhase* temp = signal_phase_;
  signal_phase_ = NULL;
  return temp;
}

// optional .common_sensors.ECLCommStatus ecl_status = 4;
inline bool SMSSPaT::has_ecl_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMSSPaT::set_has_ecl_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMSSPaT::clear_has_ecl_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMSSPaT::clear_ecl_status() {
  if (ecl_status_ != NULL) ecl_status_->::common_sensors::ECLCommStatus::Clear();
  clear_has_ecl_status();
}
inline const ::common_sensors::ECLCommStatus& SMSSPaT::ecl_status() const {
  return ecl_status_ != NULL ? *ecl_status_ : *default_instance_->ecl_status_;
}
inline ::common_sensors::ECLCommStatus* SMSSPaT::mutable_ecl_status() {
  set_has_ecl_status();
  if (ecl_status_ == NULL) ecl_status_ = new ::common_sensors::ECLCommStatus;
  return ecl_status_;
}
inline ::common_sensors::ECLCommStatus* SMSSPaT::release_ecl_status() {
  clear_has_ecl_status();
  ::common_sensors::ECLCommStatus* temp = ecl_status_;
  ecl_status_ = NULL;
  return temp;
}

// optional .common_sensors.SMSPackage sms_package = 5;
inline bool SMSSPaT::has_sms_package() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMSSPaT::set_has_sms_package() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMSSPaT::clear_has_sms_package() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMSSPaT::clear_sms_package() {
  if (sms_package_ != NULL) sms_package_->::common_sensors::SMSPackage::Clear();
  clear_has_sms_package();
}
inline const ::common_sensors::SMSPackage& SMSSPaT::sms_package() const {
  return sms_package_ != NULL ? *sms_package_ : *default_instance_->sms_package_;
}
inline ::common_sensors::SMSPackage* SMSSPaT::mutable_sms_package() {
  set_has_sms_package();
  if (sms_package_ == NULL) sms_package_ = new ::common_sensors::SMSPackage;
  return sms_package_;
}
inline ::common_sensors::SMSPackage* SMSSPaT::release_sms_package() {
  clear_has_sms_package();
  ::common_sensors::SMSPackage* temp = sms_package_;
  sms_package_ = NULL;
  return temp;
}

// optional .common_sensors.SMSStatus sms_status = 6;
inline bool SMSSPaT::has_sms_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SMSSPaT::set_has_sms_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SMSSPaT::clear_has_sms_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SMSSPaT::clear_sms_status() {
  if (sms_status_ != NULL) sms_status_->::common_sensors::SMSStatus::Clear();
  clear_has_sms_status();
}
inline const ::common_sensors::SMSStatus& SMSSPaT::sms_status() const {
  return sms_status_ != NULL ? *sms_status_ : *default_instance_->sms_status_;
}
inline ::common_sensors::SMSStatus* SMSSPaT::mutable_sms_status() {
  set_has_sms_status();
  if (sms_status_ == NULL) sms_status_ = new ::common_sensors::SMSStatus;
  return sms_status_;
}
inline ::common_sensors::SMSStatus* SMSSPaT::release_sms_status() {
  clear_has_sms_status();
  ::common_sensors::SMSStatus* temp = sms_status_;
  sms_status_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace common_sensors

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common_sensors::SMSPackage_SensorStatus_EthernetStatus>() {
  return ::common_sensors::SMSPackage_SensorStatus_EthernetStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common_sensors::SMSPackage_SimuMode>() {
  return ::common_sensors::SMSPackage_SimuMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common_sensors::SignalPhase_InterStatus>() {
  return ::common_sensors::SignalPhase_InterStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common_sensors::SignalPhase_PhaseColor>() {
  return ::common_sensors::SignalPhase_PhaseColor_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common_sensors::ECLCommStatus_CommStatus>() {
  return ::common_sensors::ECLCommStatus_CommStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sms_2dSPaT_2eproto__INCLUDED
